<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Smashing Things Together</title>
    <link>http://smashingthingstogether.com/post/</link>
    <description>Recent content in Posts on Smashing Things Together</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 30 Mar 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://smashingthingstogether.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Make a simple static blog with Hugo and deploy it to GitHub Pages: An easy, step-by-step tutorial</title>
      <link>http://smashingthingstogether.com/post/making-a-blog-with-hugo/</link>
      <pubDate>Wed, 30 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://smashingthingstogether.com/post/making-a-blog-with-hugo/</guid>
      <description>

&lt;h2 id=&#34;why:0a0e9da1f26411e529ad432d2c89b074&#34;&gt;Why?&lt;/h2&gt;

&lt;p&gt;A free, fast, easy to update, fully customizeable blog that allows you to use your own domain is a hard thing to find these days. Using a static website generator with GitHub pages gives you many benefits and a ton of flexibility, while also being completely free and super fast.&lt;/p&gt;

&lt;h2 id=&#34;why-static:0a0e9da1f26411e529ad432d2c89b074&#34;&gt;Why Static?&lt;/h2&gt;

&lt;p&gt;Skip this section if you already know that static websites are, in general, faster, less expensive, more customizeable, and more secure than dynamic websites.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Faster:&lt;/strong&gt; Many web servers are automatically optimized to serve static websites. Dynamic website &lt;em&gt;can&lt;/em&gt; be just as fast, it just usually requires a lot more maintenance and tuning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Less expensive:&lt;/strong&gt; I pay a few cents per month to host a static website on Amazon&amp;rsquo;s S3 service. I pay absolutely nothing to host a couple websites on GitHub pages. In contrast, the 3 simple Ghost blogs I host on Runkite end up costing me $15 a month.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Easier to customize:&lt;/strong&gt; In my experience, building a theme for Tumblr/Wordpress/Ghost is much more complicated than building a theme for a simple static website. There are just a lot more moving parts in those systems. Of course, this means they have more functionality built in, but when it comes down most of these extra features hardly ever matter that much.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;More secure:&lt;/strong&gt; I&amp;rsquo;m in the process of moving most of my websites over to static websites because the server that I hosted all of my side projects on got hacked. There was an insecure version of Redis installed on it (my fault), but now that I&amp;rsquo;m transitioning over to static sites, insecure software is just one more thing I don&amp;rsquo;t have to think about.&lt;/p&gt;

&lt;h2 id=&#34;why-hugo:0a0e9da1f26411e529ad432d2c89b074&#34;&gt;Why Hugo?&lt;/h2&gt;

&lt;p&gt;Skip this section if you&amp;rsquo;ve already decided to work with Hugo.&lt;/p&gt;

&lt;p&gt;When looking for a static website generator, I considered many things, but when it came down to it only one thing really matters: &lt;em&gt;Does this software make it easier or harder to write a blog post?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I like writing. Hugo makes it easy to write. Not only is it fast, but it&amp;rsquo;s incredibly focused. The directory structure is simple. The blog posts are all in plain text, formatted in Markdown. Syntax highlighting comes built in and doesn&amp;rsquo;t even require JavaScript.&lt;/p&gt;

&lt;p&gt;I can open my laptop, create a text file, and start writing. I don&amp;rsquo;t have to wait for Medium/Tumblr/Wordpress to load. I don&amp;rsquo;t have to deal with updating plugins or making sure my blogging software is up to date. I don&amp;rsquo;t even have to be on the internet.&lt;/p&gt;

&lt;p&gt;I can just write. Hugo is great for that.&lt;/p&gt;

&lt;h2 id=&#34;why-not-hugo:0a0e9da1f26411e529ad432d2c89b074&#34;&gt;Why not Hugo?&lt;/h2&gt;

&lt;p&gt;There&amp;rsquo;s one big downside to Hugo: it doesn&amp;rsquo;t preprocess any static assets. This means no Sass, Jade, or Coffeescript.&lt;/p&gt;

&lt;p&gt;Either do the preprocessesing on your own using a watch task in Gulp or Grunt, or keep your CSS and JavaScript simple like I do.&lt;/p&gt;

&lt;p&gt;This lack of preprocessing support can be seen as a downside, but I actually think it&amp;rsquo;s nice. The last time I tried to start up an old gulp project, I got about 3-4 warnings about out-of-date NPM dependencies. When all I want to do is write a simple blog post, this kind of thing is a constant source of annoyance.&lt;/p&gt;

&lt;p&gt;If Hugo adds support for minifying and concatenating CSS and JavaScript in the future, I&amp;rsquo;ll use it, but until then I&amp;rsquo;m going to enjoy keeping things simple.&lt;/p&gt;

&lt;h1 id=&#34;let-s-build-something:0a0e9da1f26411e529ad432d2c89b074&#34;&gt;Let&amp;rsquo;s build something!&lt;/h1&gt;

&lt;h2 id=&#34;table-of-contents:0a0e9da1f26411e529ad432d2c89b074&#34;&gt;Table of contents&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#installhugo&#34;&gt;Install Hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#createsite&#34;&gt;Create a site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cleanup&#34;&gt;Clean up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sitewidedata&#34;&gt;Site-wide data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#layouts&#34;&gt;Layouts and templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#staticassets&#34;&gt;Static assets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#firstblogpost&#34;&gt;Your first blog post!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#viewblog&#34;&gt;View your blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#syntaxhighlighting&#34;&gt;Syntax highlighting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#disqus&#34;&gt;Comments with Disqus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#githubpages&#34;&gt;Host on GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#deploy&#34;&gt;How to deploy&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a name=&#34;installhugo&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-install-hugo:0a0e9da1f26411e529ad432d2c89b074&#34;&gt;1. Install Hugo&lt;/h2&gt;

&lt;p&gt;On OS X, if you have Homebrew:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;brew update &amp;amp;&amp;amp; brew install hugo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Otherwise, download the installer here: &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;https://github.com/spf13/hugo/releases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more a more detailed guide, go here: &lt;a href=&#34;https://gohugo.io/overview/installing/&#34;&gt;https://gohugo.io/overview/installing/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;createsite&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-create-a-site:0a0e9da1f26411e529ad432d2c89b074&#34;&gt;2. Create a site&lt;/h2&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;hugo new site your_site
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;tip mt1point5&#34;&gt;&lt;b&gt;Tip:&lt;/b&gt; You can download the basic site we create in steps 2-6: &lt;a href=&#34;https://github.com/panphora/Basic-Hugo-Site&#34;&gt;Basic Hugo Site&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&#34;cleanup&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-clean-up:0a0e9da1f26411e529ad432d2c89b074&#34;&gt;3. Clean up&lt;/h2&gt;

&lt;p&gt;For a simple blog, you don&amp;rsquo;t need the &lt;code&gt;archetypes&lt;/code&gt; or &lt;code&gt;data&lt;/code&gt; directories, so I just deleted them for now.&lt;/p&gt;

&lt;p&gt;You don&amp;rsquo;t have to delete them, but I&amp;rsquo;m not going to explain what they&amp;rsquo;re for in this tutorial.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;cd your_site
rm -r archetypes
rm -r data
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a name=&#34;sitewidedata&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;4-site-wide-data:0a0e9da1f26411e529ad432d2c89b074&#34;&gt;4. Site-wide data&lt;/h2&gt;

&lt;p&gt;Add some basic info about your site to the &lt;code&gt;config.toml&lt;/code&gt; file. You&amp;rsquo;ll be able to use this info in all your templates.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;baseurl = &amp;quot;http://yoursite.com/&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;Your Site Title&amp;quot;

[Params]
  author = &amp;quot;Your Name&amp;quot;
  description = &amp;quot;Your Site Description&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a name=&#34;layouts&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;5-layouts-and-templates:0a0e9da1f26411e529ad432d2c89b074&#34;&gt;5. Layouts and templates&lt;/h2&gt;

&lt;p&gt;This is where we get into the design of the site. We&amp;rsquo;ll to keep things simple for now.&lt;/p&gt;

&lt;p&gt;You can skip this section if you&amp;rsquo;d prefer to install a theme from the &lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;Hugo Themes Directory&lt;/a&gt;. It&amp;rsquo;s as simple as:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;mkdir themes &amp;amp;&amp;amp; cd themes
git clone &amp;lt;theme_clone_url&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Otherwise, continue with the instructions here:&lt;/p&gt;

&lt;p&gt;The files you&amp;rsquo;ll need to create in this folder are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;partials/head.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;partials/foot.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;post/list.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;post/single.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Files in the &lt;code&gt;partials&lt;/code&gt; directory are html snippets that you can use in any template. We&amp;rsquo;ll pass them the parent template&amp;rsquo;s context, so they&amp;rsquo;ll be able to display post data or data defined in your &lt;code&gt;config.toml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;post&lt;/code&gt; directory there are two files, &lt;code&gt;list.html&lt;/code&gt; and &lt;code&gt;single.html&lt;/code&gt;. The &lt;code&gt;list.html&lt;/code&gt; file will be used to render the front page&amp;rsquo;s list of blog posts. The &lt;code&gt;single.html&lt;/code&gt; file will be used to render a single blog post.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;index.html&lt;/code&gt; file is used to render the front page of your site.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example of what these files could look like for a &lt;em&gt;very&lt;/em&gt; simple blog:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;partials/head.html&lt;/strong&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;xmlns&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;xml:lang&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;en-us&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;head&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;http-equiv&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;content-type&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;text/html; charset=utf-8&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;viewport&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;width=device-width, initial-scale=1.0, maximum-scale=1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Title }}&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;{{ .Site.BaseURL }}css/main.css&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;head&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;body&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;site-header&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;h1&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;site-title&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;{{ .Site.BaseURL }}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Site.Title }}&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;h1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;h2&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;page-description&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Site.Params.description }}&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;h2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;head.html&lt;/code&gt; partial is included in the &lt;code&gt;index.html&lt;/code&gt; and &lt;code&gt;single.html&lt;/code&gt; templates, which means it will show up on every page of your blog.&lt;/p&gt;

&lt;p&gt;In this partial, we set up all the basics for a basic, functional HTML template. We use the &lt;code&gt;Title&lt;/code&gt; variable defined in your &lt;code&gt;config.toml&lt;/code&gt; file, we have a link to a stylesheet, and we set up a basic header.&lt;/p&gt;

&lt;p&gt;In the closing partial, &lt;code&gt;footer.html&lt;/code&gt;, we close off all of the HTML tags created here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;partials/foot.html&lt;/strong&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;footer&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;© {{ .Site.Params.author }} · Proudly published with &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;http://gohugo.io/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;Hugo&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;footer&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;body&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;html&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;foot.html&lt;/code&gt; partial is included in the &lt;code&gt;index.html&lt;/code&gt; and &lt;code&gt;single.html&lt;/code&gt; templates, which means it will show up on every page of your blog.&lt;/p&gt;

&lt;p&gt;In this partial, we include a link back to Hugo, as well as a copyright notice. We also close all of the HTML tags that we opened in the &lt;code&gt;head.html&lt;/code&gt; partial.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;post/list.html&lt;/strong&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;{{ .Permalink }}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;header&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;post-header&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;h2&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;post-title&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Title }}&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;h2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;time&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;post-date&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;datetime&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;{{ .Date.Format &amp;quot;2006-01-02&amp;quot; }}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;posted {{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;header&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;section&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;post-excerpt&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    {{if .IsPage}}
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Summary }}...&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    {{end}}
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;section&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;list.html&lt;/code&gt; template is responsible for rendering a blog post&amp;rsquo;s content on the home page, as part of a list of blog posts. It includes a reference to a template variable called &lt;code&gt;Permalink&lt;/code&gt; and another one called &lt;code&gt;Summary&lt;/code&gt;. These variables are automically generated for you by Hugo.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Permalink&lt;/code&gt; variable will be replaced by a link to your full post when you generate your site. And the &lt;code&gt;Summary&lt;/code&gt; variable will, by default, automatically be set to the first 70 words of a blog post&amp;rsquo;s content.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;post/single.html&lt;/strong&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;{{ partial &amp;quot;head.html&amp;quot; . }}
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;content&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;role&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;main&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;article&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;header&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;post-header&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;h2&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;post-title&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Title }}&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;h2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;time&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;post-date&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;datetime&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;{{ .Date.Format &amp;quot;2006-01-02&amp;quot; }}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;posted {{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;header&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;section&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;post-content&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
      {{ .Content }}
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;section&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;article&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
{{ partial &amp;quot;foot.html&amp;quot; . }}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;single.html&lt;/code&gt; template is responsible for rendering a single blog post. It includes references to the &lt;code&gt;head.html&lt;/code&gt; and &lt;code&gt;foot.html&lt;/code&gt; partials because it represents an entire page, unlike the &lt;code&gt;list.html&lt;/code&gt; template.&lt;/p&gt;

&lt;p&gt;This template includes the &lt;code&gt;Title&lt;/code&gt;, &lt;code&gt;Date&lt;/code&gt;, and &lt;code&gt;Content&lt;/code&gt; variables. Hugo provides the ability to format the date. You can use pretty much any format here, as long as you use 2006 for the year, January for the month, and the 2nd for the day.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;partials/index.html&lt;/strong&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;{{ partial &amp;quot;head.html&amp;quot; . }}
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;content&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;content&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;role&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;main&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
  {{ range .Data.Pages }}
    {{ if eq .Type  &amp;quot;post&amp;quot; }}
      {{ .Render &amp;quot;list&amp;quot;}}
    {{ end }}
  {{ end }}
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
{{ partial &amp;quot;foot.html&amp;quot; . }}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;index.html&lt;/code&gt; template is used to generate the front page of your site. It includes references to the &lt;code&gt;head.html&lt;/code&gt; and &lt;code&gt;foot.html&lt;/code&gt; partials because it represents an entire page.&lt;/p&gt;

&lt;p&gt;In this template, we loop through the pages, which are stored inside a variable called &lt;code&gt;Data&lt;/code&gt;. Then, if the page has a type of &amp;ldquo;post&amp;rdquo;, we render it using the &lt;code&gt;list.html&lt;/code&gt; template. Otherwise, we ignore it.&lt;/p&gt;

&lt;p&gt;For this simple blog, we will only have one type of page, but it&amp;rsquo;s still good to leave this check in here in case we add more types later.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;staticassets&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;6-static-assets:0a0e9da1f26411e529ad432d2c89b074&#34;&gt;6. Static assets&lt;/h2&gt;

&lt;p&gt;For a basic blog, you have all you need. But we should definitely add a stylesheet to make things look a little bit nicer.&lt;/p&gt;

&lt;p&gt;The following CSS should provide some very basic styling for your blog.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;/* normalize.css 4.0.0 */&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;progress,sub,sup&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{vertical-align&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;baseline}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;html&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{font-family&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sans-serif;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ms&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;adjust&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;100%&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;webkit&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;adjust&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;100%&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;body&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{margin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;figcaption,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;menu,article,aside,details,figure,footer,header,main,nav,section,summary&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{display&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;block}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;audio,canvas,progress,video&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{display&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;inline&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;block}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;audio&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;:not&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;([controls])&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{display&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;none;height&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[hidden],template&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{display&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;none}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{background-color&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;transparent}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;:active&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,a&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;:hover&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{outline-width&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;abbr[title]&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{border-bottom&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;none;text-decoration&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;underline;text-decoration&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;underline&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;dotted}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;b,strong&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{font-weight&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;bolder}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;dfn&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{font-style&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;italic}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;h1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{font-size&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2em&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;margin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;67em&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;mark&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{background-color&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;#ff0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;color&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;#000&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;small&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{font-size&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;80%&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;sub,sup&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{font-size&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;75%&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;line-height&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;position&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;relative}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;sub&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{bottom&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:-.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;25em&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;sup&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{top&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:-.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;5em&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;img&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{border-style&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;none}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;svg&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;:not&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;:root&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{overflow&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;hidden}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;code,kbd,pre,samp&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{font-family&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;monospace&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;monospace;font-size&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1em&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;figure&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{margin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1em&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;40px&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;hr&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{box&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sizing&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;box;height&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;overflow&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;visible}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;button,input,select,textarea&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{font&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;inherit;margin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;optgroup&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{font-weight&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;700&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;select,button,input&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{overflow&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;visible}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;button,select&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{text-transform&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;none}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[type=button],[type=reset],[type=submit],button&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{cursor&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;pointer}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[disabled]&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{cursor&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;default}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[type=submit],&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[type=reset],button,html&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[type=button]&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;webkit&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;appearance&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;button}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;button:&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;:-moz-focus-inner&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,input:&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;:-moz-focus-inner&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{border&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;padding&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;button&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;:-moz-focusring&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,input&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;:-moz-focusring&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{outline&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ButtonText&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;dotted&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1px&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;fieldset&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{border&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1px&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;solid&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;silver;margin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2px&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;padding&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;35em&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;.625em&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;.75em&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;legend&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{box&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sizing&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;box;color&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;inherit;display&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;table;max-width&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;100%&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;padding&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;white-space&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;normal}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;textarea&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{overflow&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;auto}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[type=checkbox],[type=radio]&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{box&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sizing&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;box;padding&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[type=number]:&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;:-webkit-inner-spin-button&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,[type=number]:&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;:-webkit-outer-spin-button&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{height&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;auto}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[type=search]&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;webkit&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;appearance&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;textfield}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[type=search]:&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;:-webkit-search-cancel-button&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,[type=search]:&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;:-webkit-search-decoration&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;webkit&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;appearance&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;none}&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;/*# sourceMappingURL=normalize.min.css.map */&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;/* main style */&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;body&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;line-height&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1.4em&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;h1,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;h2,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;h3,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;h4,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;h5,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;h6&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;margin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;h1&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rem&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;h2&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rem&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;h3&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rem&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;h4&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;25&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rem&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;h5&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rem&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;h6&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;875&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rem&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;text-decoration&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;underline;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;#0074d9&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #a6e22e&#34;&gt;.container&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;max-width&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;52&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rem;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;margin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;auto;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #a6e22e&#34;&gt;.site-header&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;margin-top&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rem;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;margin-bottom&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rem;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #a6e22e&#34;&gt;.site-title&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;margin-bottom&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rem;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #a6e22e&#34;&gt;.site-title&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;#222&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;text-decoration&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;none;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #a6e22e&#34;&gt;.site-title&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;:hover&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;#aaa&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;.post&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;block;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;text-decoration&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;none;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;#222&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rem&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rem&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rem&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rem;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;margin-left&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;-1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rem;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;margin-right&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;-1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rem;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1px&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;solid&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;transparent;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;margin-bottom&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rem;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;.post:hover&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1px&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;solid&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;#ccc&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #a6e22e&#34;&gt;.post-title&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;margin-bottom&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rem;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;footer&lt;/span&gt;  &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;margin-top&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rem;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;#999&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;footer&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;#999&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;div class=&#34;tip mt1point5&#34;&gt;&lt;b&gt;Tip:&lt;/b&gt; You can download the basic site we create in steps 2-6: &lt;a href=&#34;https://github.com/panphora/Basic-Hugo-Site&#34;&gt;Basic Hugo Site&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&#34;firstblogpost&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;7-your-first-blog-post:0a0e9da1f26411e529ad432d2c89b074&#34;&gt;7. Your first blog post!&lt;/h2&gt;

&lt;p&gt;&lt;a name=&#34;viewblog&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;7-view-your-blog:0a0e9da1f26411e529ad432d2c89b074&#34;&gt;7. View your blog&lt;/h2&gt;

&lt;p&gt;&lt;a name=&#34;syntaxhighlighting&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;8-syntax-highlighting:0a0e9da1f26411e529ad432d2c89b074&#34;&gt;8. Syntax highlighting&lt;/h2&gt;

&lt;p&gt;&lt;a name=&#34;disqus&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;9-comments-with-disqus:0a0e9da1f26411e529ad432d2c89b074&#34;&gt;9. Comments with Disqus&lt;/h2&gt;

&lt;p&gt;&lt;a name=&#34;githubpages&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;10-host-on-github-pages:0a0e9da1f26411e529ad432d2c89b074&#34;&gt;10. Host on GitHub Pages&lt;/h2&gt;

&lt;p&gt;taken directly from: &lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog#configure-git-workflow&#34;&gt;https://gohugo.io/tutorials/github-pages-blog#configure-git-workflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;# Create a new orphand branch &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;no commit &lt;span style=&#34;color: #f8f8f2&#34;&gt;history&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; named gh-pages
git checkout --orphan gh-pages

# Unstage all files
git rm --cached $(git ls-files)

# Grab one file from the master branch so we can make a commit
git checkout master README.md

# Add and commit that file
git add .
git commit -m &amp;quot;INIT: initial commit on gh-pages branch&amp;quot;

# Push to remote gh-pages branch
git push origin gh-pages

# Return to master branch
git checkout master

# Remove the public folder to make room &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; the gh-pages subtree
rm -rf public

# Add the gh-pages branch of the repository. It will look like a folder named public
git subtree add --prefix=public git@github.com:spencerlyon2/hugo_gh_blog.git gh-pages --squash

# Pull down the file we just committed. This helps avoid merge conflicts
git subtree pull --prefix=public git@github.com:spencerlyon2/hugo_gh_blog.git gh-pages

# Run hugo. Generated site will be placed in public directory &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;or omit -t ThemeName &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; you&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;&amp;#39;&lt;/span&gt;re not using a theme&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
hugo -t ThemeName

# Add everything
git add -A

# Commit and push to master
git commit -m &amp;quot;Updating site&amp;quot; &amp;amp;&amp;amp; git push origin master

# Push the public subtree to the gh-pages branch
git subtree push --prefix=public git@github.com:spencerlyon2/hugo_gh_blog.git gh-pages
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;deploy&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;11-how-to-deploy:0a0e9da1f26411e529ad432d2c89b074&#34;&gt;11. How to deploy&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Things you need to know&lt;/p&gt;

&lt;p&gt;/content
  we have types of content, but just one for now: post
  posts can have data
    drafts
  posts are formatted in markdown
  syntax highlighting built in!&lt;/p&gt;

&lt;p&gt;/layouts
  two things you need for a blog: list layout, single layout
  you can put these in a folder called post or default, probably better to put them in post
  partials for header and footer
  index file for the home page and post loop&lt;/p&gt;

&lt;p&gt;/static
  not automatically preprocessed
    no sass
    no concatenation
    no minification
    does this matter that much? not if you keep these assets few and small, but yes if not
      you can use a watcher here to preprocess files &amp;ndash; i prefer not to to keep things simple
  put css, images, js, svgs, favicon here&lt;/p&gt;

&lt;p&gt;config
  site name
  site description
  site url
  author?&lt;/p&gt;

&lt;p&gt;adding disqus&lt;/p&gt;

&lt;p&gt;hosting on github
  deploy process
  making the public folder a subtree
  script for commit and push out everything&lt;/p&gt;

&lt;p&gt;what making a new post is like
  front matter
  does disqus have to be manual? can i use slug?
  markdown formatting
  code highlighting
  add draft tag if not done yet
  run deploy script&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Handle Errors in Meteor Methods</title>
      <link>http://smashingthingstogether.com/post/handling-errors-in-meteor-methods/</link>
      <pubDate>Thu, 03 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://smashingthingstogether.com/post/handling-errors-in-meteor-methods/</guid>
      <description>

&lt;p&gt;If you define methods for altering your collections, you get the convenience of not having to define security-issue-prone &lt;code&gt;allow&lt;/code&gt;/&lt;code&gt;deny&lt;/code&gt; rules.&lt;/p&gt;

&lt;p&gt;If you define these methods on &lt;strong&gt;both&lt;/strong&gt; the client and the server, you get the benefit of Meteor&amp;rsquo;s &lt;a href=&#34;https://www.discovermeteor.com/blog/latency-compensation/&#34;&gt;latency compensation feature&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can run into trouble, however, when you throw an error in a client-side method. You get the following unhandled exception:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;Exception while simulating the effect of invoking &amp;#39;yourMethodName&amp;#39; 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;throwing-errors-on-the-client-and-the-server:a41366158d30f9a95269470fa2f88962&#34;&gt;Throwing errors on the client and the server&lt;/h2&gt;

&lt;p&gt;In order to get around this, you can create a wrapper function that will &lt;code&gt;throw&lt;/code&gt; an error on the server and simply &lt;code&gt;return&lt;/code&gt; it on the client.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit 9/30/15:&lt;/strong&gt; The return values of Method stubs are ignored, so returning a &lt;code&gt;Meteor.Error&lt;/code&gt; on the client doesn&amp;rsquo;t really do anything.&lt;/p&gt;

&lt;p&gt;This will let you write the same code on the client and server, while also giving you the ability to display errors to the user when the server method returns.&lt;/p&gt;

&lt;h2 id=&#34;the-wrapper-function:a41366158d30f9a95269470fa2f88962&#34;&gt;The wrapper function&lt;/h2&gt;

&lt;p&gt;If you return the following &lt;code&gt;throwError&lt;/code&gt; function in a method, it won&amp;rsquo;t cause any unhandled exceptions on the client. And when the server method returns, it will hand off the error to the client.&lt;/p&gt;

&lt;p&gt;The error will be returned as the first argument to your &lt;code&gt;Meteor.call&lt;/code&gt; callback in the version of the &lt;code&gt;Meteor.call&lt;/code&gt; callback that&amp;rsquo;s triggered by the server-side code.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;throwError&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;reason&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;details&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;meteorError&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Meteor&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.Error(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;reason&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;details&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Meteor&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;isClient&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;// this error is never used&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;// on the client, the return value of a stub is ignored&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;meteorError&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Meteor&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;isServer&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;meteorError&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This function was taken from this helpful blog post: &lt;a href=&#34;http://takidashi.com/smooth-error-handling-for-meteor-methods.html&#34;&gt;Smooth error handling for Meteor.methods&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can pass it the same arguments you would pass to a &lt;code&gt;new Meteor.Error&lt;/code&gt; call, that is: &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;reason&lt;/code&gt;, and &lt;code&gt;details&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;See the &lt;code&gt;Meteor.Error&lt;/code&gt; &lt;a href=&#34;http://docs.meteor.com/#/full/meteor_error&#34;&gt;docs&lt;/a&gt; for more info.&lt;/p&gt;

&lt;h2 id=&#34;handling-errors:a41366158d30f9a95269470fa2f88962&#34;&gt;Handling errors&lt;/h2&gt;

&lt;p&gt;If a method call causes an error to be thrown, you most likely want to notify the user in some way. You can handle this in your client-side code by checking the type of error that&amp;rsquo;s returned from your &lt;code&gt;Meteor.call&lt;/code&gt; call.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Meteor&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;saveProject&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;projectName&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;project&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;no-project-name&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;sAlert&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Please specify a project name.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We check to see if the error returned is equal to an error name we know (i.e. &amp;ldquo;no-project-name&amp;rdquo;) and then return the appropriate error if it is.&lt;/p&gt;

&lt;p&gt;The above &lt;code&gt;sAlert.error&lt;/code&gt; function is from the &lt;code&gt;juliancwirko:s-alert&lt;/code&gt; package (&lt;a href=&#34;https://atmospherejs.com/juliancwirko/s-alert&#34;&gt;see here&lt;/a&gt;). It will cause a user-facing error message to pop up.&lt;/p&gt;

&lt;h2 id=&#34;consolidating-error-messages:a41366158d30f9a95269470fa2f88962&#34;&gt;Consolidating error messages&lt;/h2&gt;

&lt;p&gt;When you call and return your new &lt;code&gt;throwError&lt;/code&gt; function, if you provide a nice user-facing error message as the &lt;code&gt;reason&lt;/code&gt; text (the second argument you pass to &lt;code&gt;throwError&lt;/code&gt;) you can simplify your client-side error handling code:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Meteor&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;saveProject&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;projectName&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;result&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;sAlert&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;reason&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The above code will take the &lt;code&gt;reason&lt;/code&gt; that you provided to the &lt;code&gt;throwError&lt;/code&gt; function and display it to the user. This will cut down on the amount of custom code you have to write on the client.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit 9/4/15:&lt;/strong&gt; However! Since some of the errors returned to a &lt;code&gt;Meteor.call&lt;/code&gt; callback function won&amp;rsquo;t be one&amp;rsquo;s you&amp;rsquo;ve defined (e.g. database errors and errors thrown by package code), I recommend the following approach instead:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;// defined globally somewhere&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;isKnownError&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; 
  &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;errorName&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;listOfKnownErrors&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;no-project-name&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;user-not-logged-in&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;project-not-found&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;listOfKnownErrors&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;errorName&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;

&lt;span style=&#34;color: #a6e22e&#34;&gt;Meteor&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;saveProject&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;projectName&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;result&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;  
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;isKnownError&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;sAlert&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;reason&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;sAlert&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;An unknown error occurred while saving your project.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;sAlert&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;success&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Successfully saved your project.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #a6e22e&#34;&gt;successCallback&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This will save you from displaying potentially confusing errors to the client by checking to see if they&amp;rsquo;re listed in your approved &lt;code&gt;listOfKnownErrors&lt;/code&gt; array before displaying their &lt;code&gt;reason&lt;/code&gt; to the client.&lt;/p&gt;

&lt;p&gt;If you want, you can view this code as part of a sample project: &lt;a href=&#34;https://github.com/panphora/methodDemo/tree/isKnownError&#34;&gt;Method Demo - isKnownError Branch&lt;/a&gt;. Thank you &lt;a href=&#34;http://starvingdragon.com/&#34;&gt;@Siyfion&lt;/a&gt; for helping me correct this code.&lt;/p&gt;

&lt;h2 id=&#34;example-application:a41366158d30f9a95269470fa2f88962&#34;&gt;Example application&lt;/h2&gt;

&lt;p&gt;If you want to see how this works in a demo Meteor application, go here: &lt;a href=&#34;http://methoderrordemo.meteor.com/&#34;&gt;Method Error Demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After loading that page, try clicking the &lt;code&gt;Save Project&lt;/code&gt; button without filling in the &lt;code&gt;input&lt;/code&gt; box. It will display an error using the method described in this article.&lt;/p&gt;

&lt;p&gt;You can find the code used for making this example application here: &lt;a href=&#34;https://github.com/panphora/methodDemo&#34;&gt;Method demo&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;questions:a41366158d30f9a95269470fa2f88962&#34;&gt;Questions?&lt;/h2&gt;

&lt;p&gt;If you have any questions, you can leave a comment here, contact me on twitter at &lt;a href=&#34;https://twitter.com/artisfyhq&#34;&gt;artisfyhq&lt;/a&gt;, or email me at &lt;a href=&#34;mailto:david@storylog.com&#34;&gt;david@storylog.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pagination in Meteor.js (with Iron Router support)</title>
      <link>http://smashingthingstogether.com/post/pagination-in-meteor-js-with-iron-router-support/</link>
      <pubDate>Mon, 17 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://smashingthingstogether.com/post/pagination-in-meteor-js-with-iron-router-support/</guid>
      <description>

&lt;p&gt;Pagination might at first seem like a pretty easy, if not downright fun, feature to implement. However, like a lot of seemingly-small features, it can quickly balloon into a multi-day or multi-week project.&lt;/p&gt;

&lt;p&gt;To give you an idea of how complicated pagination can be to implement, check out this 3 part tutorial written by the talented &lt;a href=&#34;https://github.com/riebeekn&#34;&gt;Nick Riebeek&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://experimentsinmeteor.com/paging-and-sorting-part-1/&#34;&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://experimentsinmeteor.com/paging-and-sorting-part-1a/&#34;&gt;Part 1a&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://experimentsinmeteor.com/paging-and-sorting-part-2/&#34;&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At the end of this tutorial, the author ends up with a well-designed, but pretty basic, pagination system. There&amp;rsquo;s a &amp;ldquo;Previous&amp;rdquo; button and a &amp;ldquo;Next&amp;rdquo; button, but no ability to skip directly to a page by clicking on its page number &amp;mdash; or to skip directly to the first or the last page.&lt;/p&gt;

&lt;p&gt;Also, unfortunately, the code in these blogs posts was not designed to be modular, so a lot of the code would have to be rewritten and customized for every page that has pagination on it or, ideally, reworked to be modular.&lt;/p&gt;

&lt;h2 id=&#34;let-s-use-a-package-instead:0647cfcf54323acd521eb61e27ee3c4a&#34;&gt;Let&amp;rsquo;s use a package instead!&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re going to use a package because we don&amp;rsquo;t want to go through the hassle of implementing a pagination system ourselves. We&amp;rsquo;re lucky there happens to be a really good pagination package already available: &lt;a href=&#34;https://atmospherejs.com/alethes/pages&#34;&gt;Meteor Pages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the best, most feature-complete package I&amp;rsquo;ve found for adding pagination to Meteor. Some of its features include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The ability to pre-fetch data from neighboring pages. The default it to grab 3 pages ahead of the first page, so when you click on pages 2-4, they should load instantly.&lt;/li&gt;
&lt;li&gt;A local cache of each page is stored on the client, so data is never fetched more than once.&lt;/li&gt;
&lt;li&gt;The whole collection isn&amp;rsquo;t sent to the client. Only the data that&amp;rsquo;s necessary is fetched. This is especially good for projects with large collections. &lt;strong&gt;Note:&lt;/strong&gt; All collection data will be sent to the client anyways if you have the default &lt;code&gt;autopublish&lt;/code&gt; package installed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One downside of using this package, as we&amp;rsquo;ll see later in this post, is it can be a little hard to customize. However, since &lt;a href=&#34;https://trello.com/c/YxHqvlXW/67-pagination-in-core&#34;&gt;pagination isn&amp;rsquo;t coming to the core Meteor tools any time soon&lt;/a&gt;, this package will probably be the best solution for a while.&lt;/p&gt;

&lt;h1 id=&#34;getting-started:0647cfcf54323acd521eb61e27ee3c4a&#34;&gt;Getting started&lt;/h1&gt;

&lt;h2 id=&#34;create-an-app:0647cfcf54323acd521eb61e27ee3c4a&#34;&gt;Create an app&lt;/h2&gt;

&lt;p&gt;Create an app if you don&amp;rsquo;t have one already:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;meteor create [your-app-name]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;add-the-required-packages:0647cfcf54323acd521eb61e27ee3c4a&#34;&gt;Add the required packages&lt;/h2&gt;

&lt;p&gt;Add the &lt;a href=&#34;https://atmospherejs.com/alethes/pages&#34;&gt;Meteor Pages&lt;/a&gt; package, which we&amp;rsquo;ll use to handle pagination:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;meteor add alethes:pages
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add the &lt;a href=&#34;https://atmospherejs.com/iron/router&#34;&gt;Iron Router&lt;/a&gt; package, which we&amp;rsquo;ll use to handle routing:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;meteor add iron:router
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;add-some-data-to-a-collection-so-we-have-something-to-page-through:0647cfcf54323acd521eb61e27ee3c4a&#34;&gt;Add some data to a collection, so we have something to page through&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You only need to do this section if you don&amp;rsquo;t already have a collection with lots of data in it.&lt;/p&gt;

&lt;p&gt;Create a folder called &lt;code&gt;lib&lt;/code&gt; in your project&amp;rsquo;s main directory and create a file called &lt;code&gt;test-data.js&lt;/code&gt; there.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;cd your-app-directory/
mkdir lib
cd lib
nano test-data.js # use your favorite text editor to create the file
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add the following code to the &lt;code&gt;test-data.js&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Items&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Mongo&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Collection&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;items&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Meteor&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;isServer&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Items&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;find&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;count&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;// this will delete the data in the items collection&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Items&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;remove&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;({});&lt;/span&gt;

  &lt;span style=&#34;color: #75715e&#34;&gt;// adds an index to make sorting by the &amp;#39;id&amp;#39; property quicker&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Items&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;_ensureIndex&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;({&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;

  &lt;span style=&#34;color: #75715e&#34;&gt;// adds 1000 documents to &amp;#39;items&amp;#39; collection&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1001&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;Items&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;insert&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;({&lt;/span&gt;
      &lt;span style=&#34;color: #a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #a6e22e&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Hello from item #&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;!&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will generate 1000 documents, each with some unique text, and insert them into a collection called &lt;code&gt;items&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We make sure we&amp;rsquo;re indexing this collection by the &lt;code&gt;id&lt;/code&gt; property, so it&amp;rsquo;ll be easy to sort by this property later.&lt;/p&gt;

&lt;h2 id=&#34;create-the-main-templates:0647cfcf54323acd521eb61e27ee3c4a&#34;&gt;Create the main templates&lt;/h2&gt;

&lt;p&gt;Include the following markup in your main &lt;code&gt;html&lt;/code&gt; file. If you generated your project with &lt;code&gt;Meteor create&lt;/code&gt;, this file will be called &lt;code&gt;[your-project-name].html&lt;/code&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Layout&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
  {{&amp;gt; yield}}
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Items&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
  {{&amp;gt; pages}}
  {{&amp;gt; pagesNav}}
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first template, which we name &lt;code&gt;Layout&lt;/code&gt; here, is an &lt;strong&gt;Iron Router&lt;/strong&gt; convention. It&amp;rsquo;s the layout, or container, that your app&amp;rsquo;s pages will be rendered into.&lt;/p&gt;

&lt;p&gt;The second template, which we name &lt;code&gt;Items&lt;/code&gt; here, is what we&amp;rsquo;ll use to render this particular page&amp;rsquo;s content into.&lt;/p&gt;

&lt;p&gt;So, to clarify, our page&amp;rsquo;s data goes in the &lt;code&gt;Items&lt;/code&gt; template, which, in turn, is rendered into the &lt;code&gt;Layout&lt;/code&gt; template.&lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;Items&lt;/code&gt; template, we have the &lt;code&gt;pages&lt;/code&gt; and &lt;code&gt;pagesNav&lt;/code&gt; helpers. These are bundled with the &lt;strong&gt;Meteor Pages&lt;/strong&gt; package and are handled automatically.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;pages&lt;/code&gt; helper is responsible for handling the display of the main part of the page, where all of our &amp;ldquo;items&amp;rdquo; will be displayed as a list.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;Item 1 
Item 2
Item 3
etc.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;pagesNav&lt;/code&gt; helper, on the other hand, is responsible for displaying the pagination controls, which appear at the bottom of the page and look something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;&amp;lt;  &amp;lt;  1  2  3  4  5  6  7  &amp;gt;  &amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;let-s-initialize-the-pagination-functionality:0647cfcf54323acd521eb61e27ee3c4a&#34;&gt;Let&amp;rsquo;s initialize the pagination functionality!&lt;/h2&gt;

&lt;p&gt;Now we can initialize a &lt;code&gt;Meteor.Pagination&lt;/code&gt; object, and get pagination working!&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Pages&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Meteor&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Pagination&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Items&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;route&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/items/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;router&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;iron-router&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;routerTemplate&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Items&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;routerLayout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Layout&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;sort&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;templateName&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Items&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are many settings that we can add in the initialization code, but the above code covers the basics. Check out the &lt;a href=&#34;https://github.com/alethes/meteor-pages/#settings&#34;&gt;Settings&lt;/a&gt; section of the &lt;strong&gt;Meteor Pages&lt;/strong&gt; documentation for even more options. (The settings under the &amp;ldquo;Available to the client&amp;rdquo; heading are the ones you can customize.)&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;route&lt;/code&gt; setting specifies the route that will be used for showing the different pages. Since we&amp;rsquo;re using &amp;ldquo;/items/&amp;rdquo; here, the second page will look like &amp;ldquo;/items/2&amp;rdquo; and the third page will look like &amp;ldquo;/items/3&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;router&lt;/code&gt; setting specifies that we&amp;rsquo;re using the &lt;strong&gt;Iron Router&lt;/strong&gt; package for routing requests. This is the only router that &lt;strong&gt;Meteor Pages&lt;/strong&gt; supports out of the box, although you can manually add others.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;routerTemplate&lt;/code&gt; setting specifies the template we&amp;rsquo;re using to display the main content of this page. It should contain the &lt;code&gt;pages&lt;/code&gt; and &lt;code&gt;pagesNav&lt;/code&gt; helpers in it.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;routerLayout&lt;/code&gt; setting specifies the layout that this page will be rendered into.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;sort&lt;/code&gt; setting enables sorting on the collection. We&amp;rsquo;re sorting our collection using the &lt;code&gt;id&lt;/code&gt; property. (We could just as easily sort it by a different property, like &lt;code&gt;createdDate&lt;/code&gt;, if the items in this collection had this property.)&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;templateName&lt;/code&gt; setting isn&amp;rsquo;t strictly necessary. You only need to use it if the value of your &lt;code&gt;routerTemplate&lt;/code&gt; setting doesn&amp;rsquo;t match the name of your collection.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m in the habit of using all lowercase letters for my collection names and a capitalized word for my template names, so I need to use the &lt;code&gt;templateName&lt;/code&gt; setting, as you can see. (If you&amp;rsquo;re interested, you can read more about this issue here: &lt;a href=&#34;https://github.com/alethes/meteor-pages/issues/95&#34;&gt;Meteor Pages Issue 95&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This configuration assumes you&amp;rsquo;re okay with the &lt;strong&gt;Meteor Pages&lt;/strong&gt; package handling this route for you. If you want to handle the route yourself, but add paging to some part of your page, &lt;a href=&#34;#extratiphowtoaddpaginationtoanexistingroute&#34;&gt;check out this tip&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;we-re-all-done:0647cfcf54323acd521eb61e27ee3c4a&#34;&gt;We&amp;rsquo;re all done!&lt;/h2&gt;

&lt;p&gt;Well, not quite&amp;hellip;&lt;/p&gt;

&lt;p&gt;Everything should be working now. &lt;em&gt;Wooo!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;However, you may want to customize the look and feel of your pagination items and controls. If this is the case, read on.&lt;/p&gt;

&lt;h2 id=&#34;customizing-the-look-of-each-item:0647cfcf54323acd521eb61e27ee3c4a&#34;&gt;Customizing the look of each item&lt;/h2&gt;

&lt;p&gt;Right now we&amp;rsquo;re using a template that&amp;rsquo;s bundled with &lt;strong&gt;Meteor Pages&lt;/strong&gt; to display each item.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s add a custom template to override the built-in template by using the &lt;code&gt;itemTemplate&lt;/code&gt; setting in our initialization code.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Pages&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Meteor&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Pagination&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Items&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;itemTemplate&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Item&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// add your template&amp;#39;s name here&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;route&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/items/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;router&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;iron-router&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;routerTemplate&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Items&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;routerLayout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Layout&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;sort&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;templateName&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Items&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let&amp;rsquo;s write the code for the &lt;code&gt;Item&lt;/code&gt; template, which will be passed all of the properties from each item.&lt;/p&gt;

&lt;p&gt;In this case, it will have access to the &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;text&lt;/code&gt; properties, but we&amp;rsquo;ll only be displaying the value of the &lt;code&gt;text&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Item&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;item&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;{{text}}&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re just using a very simple &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; here, with the text of the item inside of it.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s style it to make it look a little better. Put the following code in your main &lt;code&gt;css&lt;/code&gt; file. If you generated your project with &lt;code&gt;Meteor create&lt;/code&gt;, this file will be called &lt;code&gt;[your-project-name].css&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;.item&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;300px&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1px&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;solid&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;black;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rem;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;margin-bottom&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rem;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;margin-left&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;auto;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;margin-right&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;auto;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now we have a nice looking item template that doesn&amp;rsquo;t automatically show all the properties of our items, like the default template did.&lt;/p&gt;

&lt;p&gt;Feel free to customize it further.&lt;/p&gt;

&lt;h2 id=&#34;customizing-the-pagination-controls:0647cfcf54323acd521eb61e27ee3c4a&#34;&gt;Customizing the pagination controls&lt;/h2&gt;

&lt;p&gt;What about the pagination controls, the ones that look like this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;&amp;lt;  &amp;lt;  1  2  3  4  5  6  7  &amp;gt;  &amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Can we customize these too?&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll notice they already look pretty nice. The HTML is structured well and each button is styled clearly. However, it&amp;rsquo;s natural to want to change these things to suit the design of your app.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s where things get a little difficult.&lt;/p&gt;

&lt;p&gt;I would strongly suggest just trying to work with the default HTML that&amp;rsquo;s already there. You can achieve most styles you&amp;rsquo;re looking for simply by overwriting the default CSS with your own.&lt;/p&gt;

&lt;p&gt;If you can make this work for you, then you&amp;rsquo;ve really lucked out.&lt;/p&gt;

&lt;p&gt;However, if you&amp;rsquo;re set on being able to modify the underlying HTML, continue on.&lt;/p&gt;

&lt;h2 id=&#34;there-must-be-a-setting-for-this:0647cfcf54323acd521eb61e27ee3c4a&#34;&gt;There must be a setting for this&amp;hellip;&lt;/h2&gt;

&lt;p&gt;There &lt;strong&gt;is&lt;/strong&gt; actually a setting called &lt;code&gt;navTemplate&lt;/code&gt;, which, according to the documentation, is &amp;ldquo;the name of the template used for displaying the pagination navigation&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;However! Unfortunately, this setting is &amp;ldquo;unavailable to the client&amp;rdquo;. This means it can&amp;rsquo;t be modified without directly modifying the package code. It&amp;rsquo;s tied to other functionality in the package too much to be easily modifiable.&lt;/p&gt;

&lt;p&gt;You can see a proposal I created on GitHub to allow  users to modify this setting: &lt;a href=&#34;https://github.com/alethes/meteor-pages/issues/166&#34;&gt;Meteor Pages Issue 166&lt;/a&gt;. It hasn&amp;rsquo;t been responded to yet.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re still set on being able to modify the HTML directly, and you&amp;rsquo;re okay with modifying the underlying package code, continue on to the dark side&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;a-quick-warning-about-modifying-the-source-code-of-an-external-package:0647cfcf54323acd521eb61e27ee3c4a&#34;&gt;A quick warning about modifying the source code of an external package&lt;/h2&gt;

&lt;p&gt;I would hardly ever suggest modifying the source code of another package and here&amp;rsquo;s why&amp;hellip;&lt;/p&gt;

&lt;p&gt;It has 3 major drawbacks that I can think of:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;As a good open-source citizen and responsible developer, if a package is missing a feature you need, you should fork the project and submit a pull request to the original author, after adding the functionality that you want. This way, everyone can benefit from your work.&lt;/li&gt;
&lt;li&gt;It will be harder to update this package in the future. Not only will you be breaking the functionality that automatically tells you about updates to this package, you&amp;rsquo;ll also be making it harder for other developers working on your project to update it. That&amp;rsquo;s because even if they manually update it in the future, they&amp;rsquo;ll somehow have to figure out how to re-implement all the changes you made into the new version of the package (which can be incredibly challenging if the package&amp;rsquo;s API has changed significantly).&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;re also making your code harder to debug. Expecting your developers to know that you made a change to an external package in your local repository is unfair and usually very hard to document. If a bug pops up due to your modifications, it will be hard to track down and fix it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you&amp;rsquo;re okay with all of the above concerns&amp;hellip; keep reading.&lt;/p&gt;

&lt;h2 id=&#34;modifying-the-pagination-controls-template:0647cfcf54323acd521eb61e27ee3c4a&#34;&gt;Modifying the pagination controls template&lt;/h2&gt;

&lt;p&gt;Download the alethes:pages package into a /packages folder in the root of your project&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;cd your-app-directory/
mkdir packages
cd packages
git clone https://github.com/alethes/meteor-pages.git
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Change the package&amp;rsquo;s name. You&amp;rsquo;ll need to go into the package&amp;rsquo;s package.js file inside of the &lt;code&gt;meteor-pages-master&lt;/code&gt; folder that you just downloaded. At the top of that file, change the name of the package from &amp;ldquo;alethes:pages&amp;rdquo; to &amp;ldquo;alethes:pages-modified&amp;rdquo; or something like that.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;cd meteor-pages-master/
nano package.js
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what the new code will look like:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Package&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;describe&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;({&lt;/span&gt;
  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;alethes:pages-modified&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// change this line&lt;/span&gt;
  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;summary&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;State of the art, out of the box Meteor pagination&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;1.8.4&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;git&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;https://github.com/alethes/meteor-pages&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now, remove the original package:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;meteor remove alethes:pages
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And install your new custom package.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;meteor add alethes:pages-modified
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; As I mentioned above, this will prevent Meteor from pinging you with update notifications for this package (because you&amp;rsquo;re changing its name).&lt;/p&gt;

&lt;p&gt;Now you can modify the template where the pagination controls are kept, which you can find in &lt;code&gt;your-app-directory/packages/meteor-pages-master/client/templates.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;cd your-app-directory/packages/meteor-pages-master/client/
nano templates.html # use your favorite text editor here
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The template you want to modify is called &lt;code&gt;_pagesNav&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example of how I modified mine:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;_pagesNav&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
  {{#if show}}
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;data-pages&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;{{name}}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;pagination-cont&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;pagination&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
      {{#each navigationNeighbors}}
        {{#unless isNavLink}}&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;sm-hide clear&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;{{/unless}}
        {{#if isNextLink}}&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;sm-hide clear&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;{{/if}}
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;pagination-item block {{#unless isNavLink}}number{{/unless}} ml1 mr1 left plain-nav-link-with-hover {{active}} {{disabled}}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;{{link}}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;{{p}}&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
      {{/each}}
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
  {{/if}}
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This is just an example, but it&amp;rsquo;s what I&amp;rsquo;m using in my own project. It made it easier for me to make my pagination controls responsive, as well as replace the arrows (&amp;ldquo;&amp;gt;&amp;rdquo; and &amp;ldquo;&amp;lt;&amp;ldquo;) with labels, like &amp;ldquo;Next&amp;rdquo; and &amp;ldquo;Previous&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;In order to get this template working, I also had to add some additional helpers to the &lt;code&gt;_pagesNav&lt;/code&gt; template.&lt;/p&gt;

&lt;p&gt;These helpers can be found in &lt;code&gt;your-app-directory/packages/meteor-pages-master/client/controllers.coffee&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;cd your-app-directory/packages/meteor-pages-master/client/
nano controllers.coffee # use your favorite text editor here
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example of how you could modify these:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Template&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;_pagesNav&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;helpers&lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;// Note:&lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;// the &amp;quot;show&amp;quot;, &amp;quot;link&amp;quot;, and &amp;quot;navigationNeighbors&amp;quot; helpers &lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;// aren&amp;#39;t shown here because they come with the package&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;isNavLink&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;// this tells the template that this is not a page number link&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;// which lets me style these links differently&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;navLinkNames&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;First&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Previous&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Next&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Last&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;navLinkNames&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;indexOf&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;isNextLink&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;// this lets me know which link is the &amp;quot;Next&amp;quot; link&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;// and I use this to implement a custom layout&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Next&amp;#39;&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The helper that I appreciate the most here is the &lt;code&gt;isNavLink&lt;/code&gt; helper. In my design I planned to style the &amp;ldquo;First&amp;rdquo;, &amp;ldquo;Previous&amp;rdquo;, &amp;ldquo;Next&amp;rdquo;, and &amp;ldquo;Last&amp;rdquo; buttons differently than the individual page buttons, and this gave me ability to easily add different classes to the page number links so I could style them differently.&lt;/p&gt;

&lt;p&gt;Thats it!&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;re all set with your completely custom pagination!&lt;/p&gt;

&lt;h2 id=&#34;extra-tip-how-to-add-pagination-to-an-existing-route:0647cfcf54323acd521eb61e27ee3c4a&#34;&gt;Extra tip: how to add pagination to an existing route&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s say you have an existing route with its own data and you want to add paging to a small section of the page.&lt;/p&gt;

&lt;p&gt;The author of the &lt;strong&gt;Meteor Pages&lt;/strong&gt; package has some notes on how to do that here: &lt;a href=&#34;https://github.com/alethes/meteor-pages/issues/104&#34;&gt;Issue 104: Use Existing Iron-Router Route&lt;/a&gt;. Basically, you can remove the built-in routing setting and handle changing the pages yourself. He provides some sample code for how to accomplish this.&lt;/p&gt;

&lt;h2 id=&#34;this-code-is-on-github:0647cfcf54323acd521eb61e27ee3c4a&#34;&gt;This code is on GitHub&lt;/h2&gt;

&lt;p&gt;You can access all of the code mentioned in this article here: &lt;a href=&#34;https://github.com/panphora/pagination-demo&#34;&gt;Pagination demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This repository doesn&amp;rsquo;t include the custom &amp;ldquo;alethes:pages-modified&amp;rdquo; package that we made above. If you want to add that in, you&amp;rsquo;ll have to do it yourself.&lt;/p&gt;

&lt;h2 id=&#34;questions:0647cfcf54323acd521eb61e27ee3c4a&#34;&gt;Questions?&lt;/h2&gt;

&lt;p&gt;If you have any questions, you can leave a comment here, contact me on twitter at &lt;a href=&#34;https://twitter.com/artisfyhq&#34;&gt;artisfyhq&lt;/a&gt;, or email me at &lt;a href=&#34;mailto:david@storylog.com&#34;&gt;david@storylog.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Also,&lt;/strong&gt; If anyone has a different solution for customizing the &lt;code&gt;_pagesNav&lt;/code&gt; template, please let me know!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The JavaScript Runtime, Fibers, and Meteor.wrapAsync (Meteor.js)</title>
      <link>http://smashingthingstogether.com/post/the-javascript-runtime-fibers-and-meteor-wrapasync/</link>
      <pubDate>Sat, 27 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://smashingthingstogether.com/post/the-javascript-runtime-fibers-and-meteor-wrapasync/</guid>
      <description>

&lt;h2 id=&#34;part-1:0a937069e89d2f82c268b50205f4fb17&#34;&gt;Part 1:&lt;/h2&gt;

&lt;h3 id=&#34;the-call-stack-the-event-loop-the-task-queue-and-how-asyncronous-functions-work-br-br:0a937069e89d2f82c268b50205f4fb17&#34;&gt;The call stack, the event loop, the task queue, and how asyncronous functions work&lt;br&gt;&lt;br&gt;&lt;/h3&gt;

&lt;p&gt;First, some basic context. When you run some JavaScript code, it&amp;rsquo;s added to the &lt;strong&gt;task queue&lt;/strong&gt;. Think of this as a todo list.&lt;/p&gt;

&lt;p&gt;When we reach the first item on the todo list, we move it over to another todo list called the &lt;strong&gt;call stack&lt;/strong&gt;. Think of this as a todo list that you want to complete before moving on to the rest of the stuff in your main todo list. The reason you do this is because things in this todo list (the &lt;strong&gt;call stack&lt;/strong&gt;) might expand into more than one thing.&lt;/p&gt;

&lt;p&gt;Have you seen &lt;a href=&#34;http://www.adultswim.com/videos/rick-and-morty/&#34;&gt;Rick and Morty&lt;/a&gt;? No..? Well, there are magical creatures on that show called Meeseeks. The way they work is you press a button and a Meeseeks pops out. Its one goal in life is to accomplish a single task, whatever you want, and then disappear forever. When it gets really frustrated though, it might choose to press the button again itself and out will pop another Meeseeks, who will also try to accomplish the original goal.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.amazonaws.com/webnet/smashing-things/post-call-stack/meeseeks.gif&#34; alt=&#34;Meeseeks&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When a function in your code calls another function, think of this as a Meeseeks pressing the button and summoning another Meeseeks to help him accomplish the original function&amp;rsquo;s goal. This can get pretty deep pretty fast, with one function that calls another function that calls another function. You can end up with hundreds of Meeseeks, I mean functions, which were all called by one original function.&lt;/p&gt;

&lt;p&gt;Let me give you an example of this.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;doLaundry&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;quarters&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;getQuarters&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;

  &lt;span style=&#34;color: #75715e&#34;&gt;// gatherClothes();&lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;// goToLaundromat();&lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;// putQuartersInMachine();&lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;// etc.&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;getQuarters&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;quarters&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;getQuartersFromCoinJar&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;quarters&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;33&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;quarters&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;getQuartersFromBank&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;getQuartersFromCoinJar&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;getQuartersFromBank&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;walkToBank&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;

  &lt;span style=&#34;color: #75715e&#34;&gt;// ...&lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;// etc.&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;walkToBank&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;// ...&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #a6e22e&#34;&gt;doLaundry&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can access all of the code mentioned in this article here: &lt;a href=&#34;https://github.com/panphora/meteorMeetup&#34;&gt;June 2015 Meteor Meetup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the code above, we call &lt;code&gt;doLaundry()&lt;/code&gt;, which in turn calls &lt;code&gt;getQuarters()&lt;/code&gt;, which in turn calls &lt;code&gt;getQuartersFromBank()&lt;/code&gt;, which finally calls &lt;code&gt;walkToBank()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This could go on and on.&lt;/p&gt;

&lt;p&gt;If you run this code on the server in a meteor app, using &lt;code&gt;meteor debug&lt;/code&gt; instead of the standard &lt;code&gt;meteor&lt;/code&gt; command &amp;mdash; and put a &lt;code&gt;debugger;&lt;/code&gt; statement in the &lt;code&gt;walkToBank()&lt;/code&gt; function, you can see the &lt;strong&gt;call stack&lt;/strong&gt; in your developer tools.&lt;/p&gt;

&lt;p&gt;Add the &lt;code&gt;debugger&lt;/code&gt; statement:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;walkToBank&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;debugger&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;// ...&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Run meteor in debug mode:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;cd /repoDirectory
meteor debug
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Go to the url it prints out:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;To debug the server process using a graphical debugging interface, visit this URL in your web browser:
http://localhost:8080/debug?port=5858
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here&amp;rsquo;s what the &lt;strong&gt;call stack&lt;/strong&gt; will look like (look at the right sidebar after loading up that url):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.amazonaws.com/webnet/smashing-things/post-call-stack/call-stack-screenshot.png&#34; alt=&#34;call stack&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The function at the top of the &lt;strong&gt;call stack&lt;/strong&gt;, &lt;code&gt;walkToBank&lt;/code&gt;, is the one we&amp;rsquo;re currently processing. After that&amp;rsquo;s finished, we&amp;rsquo;ll return to the previous function and finish it up before moving on.&lt;/p&gt;

&lt;p&gt;So&amp;hellip; as you can see, we can end up doing a lot of things that we weren&amp;rsquo;t intending to do in the first place, like going to the bank when all we wanted to do was do laundry.&lt;/p&gt;

&lt;p&gt;Now, this can cause some issues for our main todo list (the &lt;strong&gt;task queue&lt;/strong&gt;). Let&amp;rsquo;s pretend we need to not only get laundry done today, but also go shopping and go to a Meteor Meetup. If we spend all our time doing laundry, we won&amp;rsquo;t have time for other things.&lt;/p&gt;

&lt;p&gt;This is why we use asynchronous functions. Asynchronous functions allow us to pass off tasks to another server or database or to the file system &amp;mdash; and get the results whenever they&amp;rsquo;re handed back to us. This way, if we want to resize an image and add a watermark to it, for example, we can upload it to an external service and wait for the response while the rest of our program does something else.&lt;/p&gt;

&lt;p&gt;Let me give you an example of an asynchronous function in code.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;doLaundryWithWashio&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;// &amp;quot;Washio&amp;quot; is a service that does laundry for you&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;clothes&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;gatherClothes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;

  &lt;span style=&#34;color: #a6e22e&#34;&gt;scheduleWashio&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;12pm&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;// Washio arrives for initial pick-up&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;giveWashioClothes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;clothes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;cleanClothes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #75715e&#34;&gt;// Washio arrives to drop off clothes&lt;/span&gt;
      &lt;span style=&#34;color: #a6e22e&#34;&gt;getCleanClothes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;cleanClothes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;gatherClothes&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;shirt&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;pants&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;socks&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;scheduleWashio&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;callback&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;// call callback when Washio arrives at house&lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;// 5 seconds here for demonstration purposes&lt;/span&gt;
  
  &lt;span style=&#34;color: #a6e22e&#34;&gt;setTimeout&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;callback&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;confirmed&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;5000&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;giveWashioClothes&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;clothes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;callback&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;// call callback after clothes are cleaned&lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;// 5 seconds here for demonstration purposes&lt;/span&gt;

  &lt;span style=&#34;color: #a6e22e&#34;&gt;setTimeout&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;callback&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;clothes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;item&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;clean &amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;item&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}));&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;5000&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;getCleanClothes&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;cleanClothes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;console&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;clean clothes: &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;cleanClothes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;join&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;));&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #a6e22e&#34;&gt;doLaundryWithWashio&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;// a lot could happen here while the above asynchronous function is running, but we&amp;#39;re just printing a message&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;console&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;do something else&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, we have some callbacks that take some time to return. The callback function &lt;code&gt;scheduleWashio&lt;/code&gt;, for example, won&amp;rsquo;t return for 5 seconds. This will give us time to do other things and won&amp;rsquo;t block the rest of our code.&lt;/p&gt;

&lt;p&gt;When the &lt;strong&gt;call stack&lt;/strong&gt; is clear, for example after some asynchronous code is called that won&amp;rsquo;t return for a while, the JavaScript runtime will take the next thing off the &lt;strong&gt;task queue&lt;/strong&gt; and add it to the &lt;strong&gt;call stack&lt;/strong&gt;. This code, in turn, can call other functions that will also be added to the &lt;strong&gt;call stack&lt;/strong&gt;. And the JavaScript runtime won&amp;rsquo;t be able to do anything else until all of this code is done running.&lt;/p&gt;

&lt;p&gt;This is why, when you write blocking code, like a &lt;code&gt;for&lt;/code&gt; loop (&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for&#34;&gt;for loop docs&lt;/a&gt;) that iterates over 10,000 items, it can lock up the page. The JavaScript runtime isn&amp;rsquo;t able to update the page or even handle events until the call stack is clear.&lt;/p&gt;

&lt;h2 id=&#34;part-2:0a937069e89d2f82c268b50205f4fb17&#34;&gt;Part 2:&lt;/h2&gt;

&lt;h3 id=&#34;a-simple-example-of-using-fibers-br-br:0a937069e89d2f82c268b50205f4fb17&#34;&gt;A simple example of using fibers&lt;br&gt;&lt;br&gt;&lt;/h3&gt;

&lt;p&gt;You may have noticed that the asynchronous code in the last section got a little unwieldy. You can get very used to thinking linearly, so when you have to write code that will be run &amp;ldquo;some time in the future&amp;rdquo; your abstractions can break down. We can also end up with a lot of nested callbacks, which makes it a little harder to think about what our code is actually going to do.&lt;/p&gt;

&lt;p&gt;This is where fibers come in. (&lt;a href=&#34;https://github.com/laverdet/node-fibers&#34;&gt;node-fibers docs&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Fibers make asynchronous code look and behave like synchronous code. They simultaneously allow us to avoid callbacks while also not blocking the execution of the rest of our code.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example of a fiber, using our previous code as a template. Run it using &lt;code&gt;meteor debug&lt;/code&gt; if you want to observe the call stack at different points.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Fiber&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Npm&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;require&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;fibers&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;doLaundryWithWashio&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;console&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Doing laundry&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;clothes&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;gatherClothes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;debugger&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;//look at the call stack here&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;isConfirmed&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;scheduleWashio&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;12pm&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;console&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Washio is: &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;isConfirmed&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;confirmed&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;not confirmed&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;debugger&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;//look at the terminal... the for loop at the bottom of this code should have completed before the &amp;quot;Washio is: confirmed&amp;quot; string gets printed out&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;cleanClothes&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;giveWashioClothes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;clothes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color: #a6e22e&#34;&gt;getCleanClothes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;cleanClothes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;gatherClothes&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;shirt&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;pants&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;socks&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;scheduleWashio&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;// call callback when Washio arrives at house&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;console&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Scheduling Washio&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;fiber&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Fiber&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;current&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  
  &lt;span style=&#34;color: #a6e22e&#34;&gt;setTimeout&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;fiber&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3000&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Fiber&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;yield&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;giveWashioClothes&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;clothes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;// call callback after clothes are cleaned&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;console&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Giving Washio some clothes&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;fiber&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Fiber&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;current&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  
  &lt;span style=&#34;color: #a6e22e&#34;&gt;setTimeout&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;fiber&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;clothes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;item&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;clean &amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;item&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}));&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3000&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Fiber&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;yield&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;getCleanClothes&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;cleanClothes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;console&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;clean clothes: &amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;cleanClothes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;join&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;));&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;


&lt;span style=&#34;color: #a6e22e&#34;&gt;Fiber&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;doLaundryWithWashio&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}).&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;// yields to this&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;Fiber&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10000&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;9999&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #a6e22e&#34;&gt;console&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;for loop complete!&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}).&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;As you can see, this can get a bit complicated. Luckily, most Meteor server code runs in fibers automatically, so it takes care of the heavy lifting &amp;mdash; like the code at the bottom of the snippet above that creates and runs the fibers. If you&amp;rsquo;ve ever wondered why you can return a result from the database in Meteor without using a callback, it&amp;rsquo;s because all of the Meteor database functions use Fibers under the hood.&lt;/p&gt;

&lt;p&gt;In the code above, we&amp;rsquo;re running the &lt;code&gt;doLaundryWithWashio()&lt;/code&gt; function in a fiber. We&amp;rsquo;re also running a &lt;code&gt;for&lt;/code&gt; loop in another fiber right underneath it.&lt;/p&gt;

&lt;p&gt;In the main &lt;code&gt;doLaundryWithWashio&lt;/code&gt; function you&amp;rsquo;ll notice we&amp;rsquo;re treating our asynchronous functions (&lt;code&gt;scheduleWashio&lt;/code&gt; and &lt;code&gt;giveWashioClothes&lt;/code&gt;) like synchronous function and using the results we get back from them right away in the next computation. The magic of fibers happens inside of these functions.&lt;/p&gt;

&lt;p&gt;First, we get the current fiber using &lt;code&gt;var fiber = Fiber.current;&lt;/code&gt;. Then, at the end of the function, we call &lt;code&gt;Fiber.yield()&lt;/code&gt;. Think of this &lt;code&gt;yield&lt;/code&gt; method like you&amp;rsquo;re pressing the pause button while playing a video game so you can go off and do something else.&lt;/p&gt;

&lt;p&gt;When you come back to your video game later, you can start where you left off. This is what the &lt;code&gt;fiber.run()&lt;/code&gt; function does inside of the asynchronous &lt;code&gt;setTimeout&lt;/code&gt; function. It starts the fiber that we paused and adds it to the &lt;strong&gt;task queue&lt;/strong&gt;. This means that after we call &lt;code&gt;giveWashioClothes()&lt;/code&gt; (i.e. our first async function), the &lt;code&gt;for&lt;/code&gt; loop in the next fiber has time to run. After that&amp;rsquo;s complete, we wait a little and then the fiber will resume and continue running.&lt;/p&gt;

&lt;p&gt;There are a couple of good reasons you might want to know about all of this stuff. One reason is that you can get a very annoying error sometimes if you work with a lot of server code. It says something like, &amp;ldquo;Meteor code must always run within a Fiber.&amp;rdquo; You could build lots of stuff in Meteor without knowing what this error means, but I think it&amp;rsquo;s fun and useful to actually know.&lt;/p&gt;

&lt;p&gt;The second reason you might want to know about fibers is because there&amp;rsquo;s a massive ecosystem of &lt;a href=&#34;https://www.npmjs.com/#explicit&#34;&gt;npm modules&lt;/a&gt;, specifically built for Node.js, a lot of which use asynchronous callbacks &amp;ndash; and, because these modules are not normally compatible with running inside of fibers, you can&amp;rsquo;t use them without modifying them a little bit to work with Meteor.&lt;/p&gt;

&lt;h2 id=&#34;part-3:0a937069e89d2f82c268b50205f4fb17&#34;&gt;Part 3&lt;/h2&gt;

&lt;h3 id=&#34;a-simple-example-of-using-meteor-wrapasync:0a937069e89d2f82c268b50205f4fb17&#34;&gt;A simple example of using Meteor.wrapAsync()&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s an excellect blog post by the Discover Meteor team called &lt;a href=&#34;https://www.discovermeteor.com/blog/wrapping-npm-packages/&#34;&gt;&amp;ldquo;Wrapping NPM Packages for Meteor&amp;rdquo;&lt;/a&gt;. I highly recommend you check it out. I was originally going to write this blog post on how to wrap the &lt;a href=&#34;https://github.com/1lobby/mailgun-js&#34;&gt;Mailgun NPM module&lt;/a&gt; for Meteor, because I needed to be able to send attachments in my application and Meteor&amp;rsquo;s &lt;code&gt;Email&lt;/code&gt; functionality (&lt;a href=&#34;http://docs.meteor.com/#/full/email&#34;&gt;Email docs&lt;/a&gt;) doesn&amp;rsquo;t support this (even though it will in &lt;a href=&#34;https://github.com/meteor/meteor/blob/devel/History.md#in-progress-v111&#34;&gt;version 1.1.1&lt;/a&gt;). But they cover most of how to do that in the Discover Meteor post, so I decided to talk more about the lower level stuff here.&lt;/p&gt;

&lt;p&gt;To wrap up, I want to show you a Meteor method that makes working with asynchronous code easier. Not only does it use fibers under the hood, but it also binds the Meteor environment to that function, so you can access things like the &lt;code&gt;Meteor&lt;/code&gt; object and built-ins like &lt;code&gt;this.Blaze&lt;/code&gt; and &lt;code&gt;this.Deps&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Fiber&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Npm&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;require&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;fibers&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;scheduleWashioSync&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Meteor&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;wrapAsync&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;scheduleWashio&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;giveWashioClothesSync&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Meteor&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;wrapAsync&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;giveWashioClothes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;doLaundryWithWashio&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;console&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Doing laundry&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;clothes&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;gatherClothes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;

  &lt;span style=&#34;color: #75715e&#34;&gt;// async&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;isConfirmed&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;scheduleWashioSync&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;12pm&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;console&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Washio is: &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;isConfirmed&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;confirmed&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;not confirmed&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  
  &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;cleanClothes&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;giveWashioClothesSync&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;clothes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color: #a6e22e&#34;&gt;getCleanClothes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;cleanClothes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;gatherClothes&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;shirt&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;pants&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;socks&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;scheduleWashio&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;callback&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;// call callback when Washio arrives at house&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;console&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Scheduling Washio&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  
  &lt;span style=&#34;color: #a6e22e&#34;&gt;setTimeout&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;callback&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3000&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;giveWashioClothes&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;clothes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;callback&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;// call callback after clothes are cleaned&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;console&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Giving Washio some clothes&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  
  &lt;span style=&#34;color: #a6e22e&#34;&gt;setTimeout&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;callback&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;clothes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;item&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;clean &amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;item&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}));&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3000&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;getCleanClothes&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;cleanClothes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;console&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;clean clothes: &amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;cleanClothes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;join&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;));&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #a6e22e&#34;&gt;Fiber&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;doLaundryWithWashio&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}).&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;// yields to this&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;Fiber&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10000&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;9999&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #a6e22e&#34;&gt;console&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;for loop complete!&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}).&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This code is remarkably similar to our initial fibers example. The only difference is we simplify our asynchronous functions by wrapping them with &lt;code&gt;Meteor.wrapAsync&lt;/code&gt;. We don&amp;rsquo;t have to do anything else except wrap it, which makes it perfect for working with code you don&amp;rsquo;t want to modify.&lt;/p&gt;

&lt;p&gt;Two things to keep in mind when using &lt;code&gt;Meteor.wrapAsync&lt;/code&gt;: it expects the callback function that&amp;rsquo;s called inside your asynchronous function to be the last argument and it expects the callback&amp;rsquo;s first parameter to be an error or &lt;code&gt;null&lt;/code&gt; value (if there is no error). This is standard practice and you&amp;rsquo;ll find that most NPM modules do this already.&lt;/p&gt;

&lt;p&gt;So, now you know &amp;mdash; if you want to include an external, asyncronous module in Meteor (and be able to use it like it&amp;rsquo;s running syncronously), you should use &lt;code&gt;Meteor.wrapAsync&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;And now you also know why!&lt;/p&gt;

&lt;h2 id=&#34;this-code-is-on-github:0a937069e89d2f82c268b50205f4fb17&#34;&gt;This code is on GitHub&lt;/h2&gt;

&lt;p&gt;You can access all of the code mentioned in this article here: &lt;a href=&#34;https://github.com/panphora/meteorMeetup&#34;&gt;June 2015 Meteor Meetup&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;questions:0a937069e89d2f82c268b50205f4fb17&#34;&gt;Questions?&lt;/h2&gt;

&lt;p&gt;If you have any questions, you can leave a comment here, contact me on twitter at &lt;a href=&#34;https://twitter.com/artisfyhq&#34;&gt;artisfyhq&lt;/a&gt;, or email me at &lt;a href=&#34;mailto:david@storylog.com&#34;&gt;david@storylog.com&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;additional-resources:0a937069e89d2f82c268b50205f4fb17&#34;&gt;Additional resources&lt;/h2&gt;

&lt;p&gt;If you want an alternate explanation of these topics, with extra-cute explanatory comics, check out this awesome article: &lt;a href=&#34;http://phucnguyen.info/blog/everything-you-need-to-know-about-async-meteor/&#34;&gt;Everything You Need To Know About Async &amp;amp; Meteor&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, for some of the &lt;strong&gt;best&lt;/strong&gt; Meteor.js tutorials related to these topics, check out these awesome &lt;a href=&#34;https://www.eventedmind.com/&#34;&gt;Evented Mind&lt;/a&gt; screencasts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.eventedmind.com/classes/the-javascript-runtime/what-is-a-runtime&#34;&gt;The JavaScript Runtime&lt;/a&gt; &amp;mdash; 7 video series&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.eventedmind.com/classes/meteor-fibers-and-dynamics-9ba17f98/introduction-852d7a76&#34;&gt;Meteor Fibers and Dynamics&lt;/a&gt; &amp;mdash; 8 video series&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I found these screencasts to be very helpful in furthering my understanding of JavaScript and Meteor.js and I refer back to them sometimes when I need a deeper understanding.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Make Your First Meteor.js Package</title>
      <link>http://smashingthingstogether.com/post/make-your-first-meteor-js-package/</link>
      <pubDate>Wed, 03 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://smashingthingstogether.com/post/make-your-first-meteor-js-package/</guid>
      <description>

&lt;p&gt;This tutorial will take you through the steps I took in order to make my first Meteor package.&lt;/p&gt;

&lt;h2 id=&#34;the-problem:5771af88ff70e68d3a1e5cb6870f99f3&#34;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;I wanted to be able to show some elements on the page when my app was in production (i.e. deployed to a live server) and other elements when it was in development mode (i.e. on my local machine).&lt;/p&gt;

&lt;p&gt;In the end, I wanted to be able to write code like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;{{#if isProdEnvironment}}
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;sign-up-message&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;Please sign up for our newsletter: &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;http://eepurl.com/bjYG-9&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;Sign up&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
{{/if}}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; One reason you might want this functionality is if there are certain services that you don&amp;rsquo;t want to be used for testing by your developers, like a sign up form that you don&amp;rsquo;t want polluted with fake email addresses. The reason I&amp;rsquo;m using it is to hide an ugly red banner that I need to show in production because my site isn&amp;rsquo;t ready yet, but I want to be able to show it off to friends and family.&lt;/p&gt;

&lt;h2 id=&#34;step-1:5771af88ff70e68d3a1e5cb6870f99f3&#34;&gt;Step 1&lt;/h2&gt;

&lt;p&gt;Create a package inside your app directory.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;cd yourAppDirectory/
meteor create --package panphora:environment-template-helpers
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;panphora&lt;/code&gt; is my Meteor username and &lt;code&gt;environment-template-helpers&lt;/code&gt; is the package name.&lt;/p&gt;

&lt;p&gt;See: &lt;a href=&#34;http://docs.meteor.com/#/full/writingpackages&#34;&gt;http://docs.meteor.com/#/full/writingpackages&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-2:5771af88ff70e68d3a1e5cb6870f99f3&#34;&gt;Step 2&lt;/h2&gt;

&lt;p&gt;Add your package to your Meteor project.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;meteor add panphora:environment-template-helpers
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will install the package as part of your Meteor app and let you start developing it live.&lt;/p&gt;

&lt;h2 id=&#34;step-3:5771af88ff70e68d3a1e5cb6870f99f3&#34;&gt;Step 3&lt;/h2&gt;

&lt;p&gt;Edit your &lt;code&gt;package.js&lt;/code&gt; file. Here&amp;rsquo;s what mine looks like:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Package&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;describe&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;({&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;panphora:environment-template-helpers&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;version&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;0.0.1&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;summary&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Use template helpers to determine if you are in development or production&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;git&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;documentation&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;README.md&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;

&lt;span style=&#34;color: #a6e22e&#34;&gt;Package&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;onUse&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;api&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;api&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;versionsFrom&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;1.1.0.2&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;api&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;use&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;templating&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;client&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;api&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;use&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;session&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;client&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;api&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;addFiles&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;server/environment-template-helpers.js&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;server&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;api&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;addFiles&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;client/environment-template-helpers.js&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;client&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Most of this is generated by default.&lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;Package.onUse&lt;/code&gt; function I tell Meteor that I need to use two of its built-in packages: &lt;code&gt;templating&lt;/code&gt; and &lt;code&gt;session&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I also include two files, one that will be loaded on the server and one that will be loaded on the client. If you want to use a file on both the server and the client, just don&amp;rsquo;t specify a &lt;code&gt;client&lt;/code&gt; or &lt;code&gt;server&lt;/code&gt; string after the location of the file. For example: &lt;code&gt;api.addFiles(&#39;lib/environment-template-helpers.js&#39;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll also notice I removed the reference to the default test file. Not a good idea usually, but this is a basic tutorial.&lt;/p&gt;

&lt;h2 id=&#34;step-4:5771af88ff70e68d3a1e5cb6870f99f3&#34;&gt;Step 4&lt;/h2&gt;

&lt;p&gt;Editing the server file.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;server/environment-template-helpers.js&lt;/code&gt; file I add some code for detecting if we&amp;rsquo;re in production or not.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I checked multiple cloud hosting providers and all of them set the &lt;code&gt;NODE_ENV&lt;/code&gt; environment variable to &amp;lsquo;production&amp;rsquo; when in production, so the following should work.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Meteor&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;methods&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;({&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;isProductionEnvironment&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;nodeEnv&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;process&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;env&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;NODE_ENV&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;nodeEnv&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;toLowerCase&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;production&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I default to &lt;code&gt;development&lt;/code&gt; mode if &lt;code&gt;NODE_ENV&lt;/code&gt; is set to anything other than &amp;lsquo;production&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;This method will allow me to call the &lt;code&gt;isProductionEnvironment&lt;/code&gt; function on the client and get back either a &lt;code&gt;true&lt;/code&gt; or a &lt;code&gt;false&lt;/code&gt; value.&lt;/p&gt;

&lt;h2 id=&#34;step-5:5771af88ff70e68d3a1e5cb6870f99f3&#34;&gt;Step 5&lt;/h2&gt;

&lt;p&gt;Editing the client file.&lt;/p&gt;

&lt;p&gt;I call the &lt;code&gt;isProductionEnvironment&lt;/code&gt; method from the client and use the result to set some &lt;code&gt;Session&lt;/code&gt; variables.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Meteor&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;isProductionEnvironment&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;isProd&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Meteor&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.Error(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;detect-environment&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Could not determine if in a production environment or not.&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;Session&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;isDevEnvironment&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;isProd&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;Session&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;isProdEnvironment&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;isProd&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I throw a &lt;code&gt;Meteor.Error&lt;/code&gt; here if I get an error back from the server. I&amp;rsquo;m not sure if this is a best practice, but it doesn&amp;rsquo;t seem to do any harm if it&amp;rsquo;s triggered. Although, of course, the &lt;code&gt;Session&lt;/code&gt; variables will never get set if it is.&lt;/p&gt;

&lt;h2 id=&#34;step-6:5771af88ff70e68d3a1e5cb6870f99f3&#34;&gt;Step 6&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s make some global template helpers that we can use in our client templates.&lt;/p&gt;

&lt;p&gt;We need to get the &lt;code&gt;Session&lt;/code&gt; variables that we set in the last step into our templates. Luckily, we can define global helpers than can be used in &lt;em&gt;any&lt;/em&gt; template.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s define some in the &lt;code&gt;client/environment-template-helpers.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Template&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;registerHelper&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;isDevEnvironment&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Session&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;isDevEnvironment&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;

&lt;span style=&#34;color: #a6e22e&#34;&gt;Template&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;registerHelper&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;isProdEnvironment&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Session&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;isProdEnvironment&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;These helpers will let us do this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;{{#if isDevEnvironment}}
We&amp;#39;re in development mode!
{{/if}}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;{{#if isProdEnvironment}}
We&amp;#39;re in production mode!
{{/if}}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Continue this tutorial only if you want to learn how to add your package to the Meteor package directory.&lt;/p&gt;

&lt;h2 id=&#34;step-8:5771af88ff70e68d3a1e5cb6870f99f3&#34;&gt;Step 8&lt;/h2&gt;

&lt;p&gt;Move your package into a separate git repository.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;cd yourAppDirectory/
# your app directory
cd packages/
# your app&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;&amp;#39;&lt;/span&gt;s packages directory
cp -R environment-template-helpers $HOME/GitHub
# copy your package into a separate folder
cd $HOME/GitHub/environment-template-helpers
# move into your package directory
git init
# initiate a git repository
git add .
# add all the files in this directory to your repository
git commit -am &amp;quot;initial commit&amp;quot;
# make your first commit
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now, create a new repo on &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;, then follow along with the commands below.&lt;/p&gt;

&lt;p&gt;See: &lt;a href=&#34;https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/&#34;&gt;Add an existing project to GitHub - GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;git remote add origin &amp;lt;GitHubURL&amp;gt;
git push origin master
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Back in &lt;strong&gt;Step 3&lt;/strong&gt; you may have noticed that there was an empty field in the &lt;code&gt;package.js&lt;/code&gt; file called &lt;code&gt;git&lt;/code&gt;. This is where we can now add a link to our new GitHub project. This is an important step, so that other developers can review our code when they&amp;rsquo;re auditing our package.&lt;/p&gt;

&lt;p&gt;Fill out the &lt;code&gt;git&lt;/code&gt; field in &lt;code&gt;package.js&lt;/code&gt;, commit this change, and then push this change to GitHub.&lt;/p&gt;

&lt;h2 id=&#34;step-9:5771af88ff70e68d3a1e5cb6870f99f3&#34;&gt;Step 9&lt;/h2&gt;

&lt;p&gt;One last step before you can get your package out into the world!&lt;/p&gt;

&lt;p&gt;Go into your package&amp;rsquo;s directory publish it:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;cd yourAppDirectory/
meteor publish --create
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;You only need the &lt;code&gt;--create&lt;/code&gt; flag the first time you publish a package.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it! It&amp;rsquo;s out there now! You can search for it by searching for your username or a keyword, for example:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;meteor search environment-template
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Every time you call &lt;code&gt;meteor publish&lt;/code&gt; you need to update the version number in your &lt;code&gt;package.js&lt;/code&gt; file. That&amp;rsquo;s how Meteor will know that&amp;rsquo;s it&amp;rsquo;s a new version.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Meteor will auto-generate a file called &lt;code&gt;.versions&lt;/code&gt; and put it inside your package directory. You should include this file in your git repository. It helps make sure that other people who download your package end up using all the same versions of your package dependencies. For example, in this package, we&amp;rsquo;re using version &lt;code&gt;1.1.0&lt;/code&gt; of the &lt;code&gt;session&lt;/code&gt; package and version &lt;code&gt;1.1.1&lt;/code&gt; of the &lt;code&gt;templating&lt;/code&gt; package.&lt;/p&gt;

&lt;h2 id=&#34;step-10:5771af88ff70e68d3a1e5cb6870f99f3&#34;&gt;Step 10&lt;/h2&gt;

&lt;p&gt;Clean up time!&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re going to remove the local version of this package from our app and add in our newly published version. (This step is totally optional).&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;meteor remove panphora:environment-template-helpers
# remove the package from your Meteor app
rm -rf packages/environment-template-helpers/
# remove the package&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;&amp;#39;&lt;/span&gt;s directory and files
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Always be super careful when using the &lt;code&gt;rm -rf&lt;/code&gt; command, as it&amp;rsquo;s potentially very dangerous (the &lt;code&gt;r&lt;/code&gt; and the &lt;code&gt;f&lt;/code&gt; stand for &lt;code&gt;recursive&lt;/code&gt; and &lt;code&gt;force&lt;/code&gt; respectively. These are &lt;strong&gt;very&lt;/strong&gt; dangerous words when working with files and folders.)&lt;/p&gt;

&lt;p&gt;Add your brand new package:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;meteor add panphora:environment-template-helpers
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Woohoo! First package done!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atmospherejs.com/panphora/environment-template-helpers&#34;&gt;https://atmospherejs.com/panphora/environment-template-helpers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good luck. Feel free to ask questions below in the comment area.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deploying Your App to Scalingo (Meteor.js)</title>
      <link>http://smashingthingstogether.com/post/deploying-your-app-to-scalingo-meteor-js/</link>
      <pubDate>Tue, 02 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://smashingthingstogether.com/post/deploying-your-app-to-scalingo-meteor-js/</guid>
      <description>

&lt;p&gt;Deploying Meteor webapps can be difficult. When I was trying to deploy to &lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;Digital Ocean&lt;/a&gt; from my Windows machine, I ran into some serious issues. They were easy enough to resolve after I figured out what they were, but they required an extra 10-20 minutes of work &lt;em&gt;every&lt;/em&gt; deploy.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve heard good things about &lt;a href=&#34;https://modulus.io/&#34;&gt;Modulus&lt;/a&gt;. Supposedly they make it really easy to get things set up with their automated command line tool. &lt;a href=&#34;http://www.meteorpodcast.com/&#34;&gt;The Meteor Podcast&lt;/a&gt; recommends them highly.&lt;/p&gt;

&lt;p&gt;Today, I heard about &lt;a href=&#34;https://scalingo.com/&#34;&gt;Scalingo&lt;/a&gt; and decided to try it out. It was surprisingly easy to set up and I&amp;rsquo;m very tempted to stay with them simply because they&amp;rsquo;re relatively inexpensive and super easy to work with (mostly because of the easy part).&lt;/p&gt;

&lt;h2 id=&#34;step-1:7a741f66b9a293b1f20fa64bfe6cae82&#34;&gt;Step 1&lt;/h2&gt;

&lt;p&gt;Sign up for an account: &lt;a href=&#34;https://scalingo.com/meteorjs-hosting&#34;&gt;https://scalingo.com/meteorjs-hosting&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-2:7a741f66b9a293b1f20fa64bfe6cae82&#34;&gt;Step 2&lt;/h2&gt;

&lt;p&gt;Create an app&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.amazonaws.com/webnet/smashing-things/post-scalingo/scalingo-dashboard.png&#34; alt=&#34;Scalingo Dashboard&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When you activate your account and login, you&amp;rsquo;ll be presented with this screen. Click the big blue button and name your app.&lt;/p&gt;

&lt;h2 id=&#34;step-3:7a741f66b9a293b1f20fa64bfe6cae82&#34;&gt;Step 3&lt;/h2&gt;

&lt;p&gt;Install the Scalingo command line tool: &lt;a href=&#34;http://cli.scalingo.com/&#34;&gt;http://cli.scalingo.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s one command on linux or mac os, but they have installers for just about every operating system.&lt;/p&gt;

&lt;h2 id=&#34;step-4:7a741f66b9a293b1f20fa64bfe6cae82&#34;&gt;Step 4&lt;/h2&gt;

&lt;p&gt;Generate a local ssh key.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;On mac or linux, use the following command:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;ssh-keygen
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Accept the defaults. Press &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt; through all the prompts. It&amp;rsquo;ll look like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;Generating public/private rsa key pair.
Enter file in which to save the key (/Users/username/.ssh/id_rsa): 
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /Users/username/.ssh/id_rsa.
Your public key has been saved in /Users/username/.ssh/id_rsa.pub.
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;step-5:7a741f66b9a293b1f20fa64bfe6cae82&#34;&gt;Step 5&lt;/h2&gt;

&lt;p&gt;Add your new public SSH key to Scalingo using the command line tool.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;scalingo keys-add &amp;quot;YourComputerName SSH Key&amp;quot; /$HOME/.ssh/id_rsa.pub
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also do this through their web interface. Click on your profile name in the left sidebar and a tab called &amp;ldquo;SSH Keys&amp;rdquo; will be revealed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.amazonaws.com/webnet/smashing-things/post-scalingo/scalingo-username.png&#34; alt=&#34;Scalingo username&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-6:7a741f66b9a293b1f20fa64bfe6cae82&#34;&gt;Step 6&lt;/h2&gt;

&lt;p&gt;Add a link to the Scalingo remote repository for your app. Your app needs to be part of a git repo in order for this step to work.&lt;/p&gt;

&lt;p&gt;Inside your app directory:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;git remote add scalingo git@scalingo.com:yourappname.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See: &lt;a href=&#34;http://doc.scalingo.com/languages/javascript/nodejs/getting-started-with-meteor.html&#34;&gt;Scalingo - Getting Started with Meteor&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-7-optional:7a741f66b9a293b1f20fa64bfe6cae82&#34;&gt;Step 7 (optional)&lt;/h2&gt;

&lt;p&gt;This step is only necessary if you want to use a custom domain name. If you&amp;rsquo;re okay with the default domain name (&lt;a href=&#34;https://yourapp.scalingo.io&#34;&gt;https://yourapp.scalingo.io&lt;/a&gt;), skip this step.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add a CNAME record from www.yourdomainname.com to yourapp.scalingo.io&lt;/li&gt;
&lt;li&gt;Use an ALIAS record or CNAME record from your root domain (yourdomainname.com) to yourapp.scalingo.com.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The second step can be quite hard if your DNS service doesn&amp;rsquo;t support it. I signed up for &lt;a href=&#34;https://dnsimple.com/&#34;&gt;DNSimple&lt;/a&gt; and used their custom ALIAS record to accomplish the second step. It can seem expensive to pay $5 a month for DNS (look for their Bronze plan), but there&amp;rsquo;s a free trial and, when it comes to deploys, having an easy-to-use DNS service is amazing.&lt;/p&gt;

&lt;p&gt;Also, make sure you add both the &lt;code&gt;www&lt;/code&gt; and root domain of your website to Scalingo, under the &lt;strong&gt;Domains&lt;/strong&gt; tab.&lt;/p&gt;

&lt;h2 id=&#34;step-8-optional:7a741f66b9a293b1f20fa64bfe6cae82&#34;&gt;Step 8 (optional)&lt;/h2&gt;

&lt;p&gt;This step is only necessary if you want to use HTTPS with your custom domain name. Skip this step if you&amp;rsquo;re using the default &lt;a href=&#34;https://yourapp.scalingo.io&#34;&gt;https://yourapp.scalingo.io&lt;/a&gt; domain name.&lt;/p&gt;

&lt;p&gt;I get my SSL Certificates from Namecheap. They&amp;rsquo;re very inexpensive. Just make sure you use &lt;code&gt;www&lt;/code&gt; in your domain name when ordering the certificate. (An SSL Certificate for &lt;code&gt;www.yourdomainname.com&lt;/code&gt; will cover both the &lt;code&gt;www&lt;/code&gt; version as well as the root domain, while an SSL Certificate for the root domain will only cover the root domain.)&lt;/p&gt;

&lt;p&gt;Once you get your Certificate and Intermediate CA in an email, combine them into a file called &lt;code&gt;yourappname.crt&lt;/code&gt;. Make sure you include the lines that look like:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;-----BEGIN CERTIFICATE-----
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;-----END CERTIFICATE-----
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Upload this file using the Scalingo web interface:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to the Domains tab&lt;/li&gt;
&lt;li&gt;Click on the gear&lt;/li&gt;
&lt;li&gt;Upload the &lt;code&gt;crt&lt;/code&gt; file you just made, as well as they key that you generated on your own in order to get the certificate.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.amazonaws.com/webnet/smashing-things/post-scalingo/scalingo-ssl.png&#34; alt=&#34;Scalingo SSL&#34; /&gt;
&lt;a href=&#34;https://s3.amazonaws.com/webnet/smashing-things/post-scalingo/scalingo-ssl.png&#34;&gt;Full-sized image&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update 06/08/15:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want your app to always redirect to the &lt;code&gt;https&lt;/code&gt; version, you will also have to install the &lt;code&gt;force-ssl&lt;/code&gt; package. You can find that here: &lt;a href=&#34;https://atmospherejs.com/meteor/force-ssl&#34;&gt;meteor force-ssl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I ran into one problem with the &lt;code&gt;force-ssl&lt;/code&gt; package. When I went to my domain name, it would redirect to the scalingo default domain, e.g. yourapp.scalingo.com&lt;/p&gt;

&lt;p&gt;In order to fix this, add this line to a file in your main &lt;code&gt;server&lt;/code&gt; directory:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;Meteor.startup(function () {
  Meteor.absoluteUrl.defaultOptions.rootUrl = &amp;quot;https://yourdomainname.com&amp;quot;;
});
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;step-9-optional:7a741f66b9a293b1f20fa64bfe6cae82&#34;&gt;Step 9 (optional)&lt;/h2&gt;

&lt;p&gt;This step is only necessary if your Meteor app isn&amp;rsquo;t in the root of your git repository. Skip this step if you&amp;rsquo;re using an example Meteor app or if you generated your app using &lt;code&gt;meteor create myapp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Using the Scalingo command line tool, add an environment variable pointing to the location of your app, relative to the root of your git repo.&lt;/p&gt;

&lt;p&gt;In your project directory:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;scalingo -a myapp env-set PROJECT_DIR=path/to/app
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;See: &lt;a href=&#34;http://doc.scalingo.com/deployment/project-dir&#34;&gt;Use a custom directory - Scalingo&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-10:7a741f66b9a293b1f20fa64bfe6cae82&#34;&gt;Step 10&lt;/h2&gt;

&lt;p&gt;Deploy your application to Scalingo.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;git push scalingo master
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;3&amp;hellip;&lt;/p&gt;

&lt;p&gt;2&amp;hellip;&lt;/p&gt;

&lt;p&gt;1&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Go!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You should see a screen of commands flash by. Some of them take a while to complete. In the end, though, you should have an app at &lt;a href=&#34;https://yourapp.scalingo.io&#34;&gt;https://yourapp.scalingo.io&lt;/a&gt; and at your custom domain (if you have one and if the DNS has had time to propagate).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; Here&amp;rsquo;s another good write-up on the topic: &lt;a href=&#34;http://dev4devs.com/2015/05/18/meteor-how-to-deploy-meteor-application-in-scalingo/&#34;&gt;How to Deploy a Meteor App in Scalingo - Dev 4 Days&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Make Custom Sign Up and Login Forms (Meteor.js)</title>
      <link>http://smashingthingstogether.com/post/how-to-make-a-custom-sign-up-form-meteor-js/</link>
      <pubDate>Fri, 29 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://smashingthingstogether.com/post/how-to-make-a-custom-sign-up-form-meteor-js/</guid>
      <description>

&lt;p&gt;If you&amp;rsquo;re making a basic website, the &lt;code&gt;accounts-ui&lt;/code&gt; package is a great option to get started with (&lt;a href=&#34;https://atmospherejs.com/meteor/accounts-ui&#34;&gt;https://atmospherejs.com/meteor/accounts-ui&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;However, if you want to add some custom styles to your sign up and login forms, follow along here.&lt;/p&gt;

&lt;h2 id=&#34;1-install-some-basic-packages:eb1c42d623b1b1c8a006d6a9493a0eae&#34;&gt;1. Install some basic packages&lt;/h2&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;meteor add accounts-password
meteor add juliancwirko:s-alert
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;accounts-password&lt;/code&gt; package depends on the &lt;code&gt;accounts-base&lt;/code&gt; package, so that will also be installed.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;juliancwirko:s-alert&lt;/code&gt; package will show alerts in the corner of the screen. We&amp;rsquo;ll use this to let a user know they entered an email address or password that&amp;rsquo;s invalid.&lt;/p&gt;

&lt;h2 id=&#34;2-configure-the-alerts:eb1c42d623b1b1c8a006d6a9493a0eae&#34;&gt;2. Configure the alerts&lt;/h2&gt;

&lt;p&gt;I put the following code in the main &lt;code&gt;lib&lt;/code&gt; folder (in a file called &lt;code&gt;startup.js&lt;/code&gt;) to configure the style of the popup alerts.&lt;/p&gt;

&lt;p&gt;Putting it in the &lt;code&gt;lib&lt;/code&gt; folder ensures it will be loaded before other files, although that&amp;rsquo;s not strictly necessary here.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Meteor&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;startup&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Meteor&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;isClient&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;sAlert&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;({&lt;/span&gt;
      &lt;span style=&#34;color: #a6e22e&#34;&gt;effect&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;flip&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #a6e22e&#34;&gt;position&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;bottom-right&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #a6e22e&#34;&gt;timeout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;5000&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #a6e22e&#34;&gt;html&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #a6e22e&#34;&gt;onRouteClose&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #a6e22e&#34;&gt;stack&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to also use the flip animation I&amp;rsquo;m using here, you have to install a separate package for that:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;meteor add juliancwirko:s-alert-flip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can see all the available options and effects for this package here: &lt;a href=&#34;http://s-alert.meteor.com/&#34;&gt;http://s-alert.meteor.com/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-make-some-helper-functions-for-validating-your-forms:eb1c42d623b1b1c8a006d6a9493a0eae&#34;&gt;3. Make some helper functions for validating your forms&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re going to want to make sure that each user enters a valid email address and password, so we&amp;rsquo;re just going to write those functions ahead of time.&lt;/p&gt;

&lt;p&gt;They&amp;rsquo;ll be included in the &lt;code&gt;submit&lt;/code&gt; event binding for both the Login form and the Sign up form.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;checkEmailIsValid&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;aString&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;aString&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;aString&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;aString&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;aString&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;indexOf&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #a6e22e&#34;&gt;checkPasswordIsValid&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;aString&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;aString&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;aString&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;aString&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Don&amp;rsquo;t use the &lt;code&gt;var&lt;/code&gt; keyword here unless you want these functions to be scoped to the file they&amp;rsquo;re in. Meteor allows you to omit the &lt;code&gt;var&lt;/code&gt; keyword to make a variable global across all files.&lt;/p&gt;

&lt;p&gt;I put these function in a &lt;code&gt;helpers.js&lt;/code&gt; file in my main &lt;code&gt;lib&lt;/code&gt; folder. This way we can use them anywhere on the server or the client.&lt;/p&gt;

&lt;h2 id=&#34;4-build-the-html-for-the-sign-up-form:eb1c42d623b1b1c8a006d6a9493a0eae&#34;&gt;4. Build the html for the Sign up form&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;SignUp&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;sign-up-form&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;  
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;email-address-input&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;password-input&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;Sign up&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;button&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;form&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll probably want to add some more style to this, or at least some &lt;code&gt;label&lt;/code&gt; elements and &lt;code&gt;placeholder&lt;/code&gt; values for the email and password fields.&lt;/p&gt;

&lt;h2 id=&#34;5-build-the-html-for-the-login-form:eb1c42d623b1b1c8a006d6a9493a0eae&#34;&gt;5. Build the html for the Login form&lt;/h2&gt;

&lt;p&gt;The login form is pretty much identical.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Login&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;login-form&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;  
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;email-address-input&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;password-input&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;Login&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;button&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;form&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;6-set-up-the-event-handlers-for-the-sign-up-form:eb1c42d623b1b1c8a006d6a9493a0eae&#34;&gt;6. Set up the event handlers for the Sign up form&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Template&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;SignUp&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;events&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;({&lt;/span&gt;
  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;submit .sign-up-form&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;event&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;event&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;preventDefault&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;$form&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;event&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;currentTarget&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;$emailInput&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;$form&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;find&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;.email-address-input&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;eq&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;$passwordInput&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;$form&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;find&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;.password-input&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;eq&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;emailAddress&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;$emailInput&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;val&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;password&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;$passwordInput&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;val&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;//trim&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;emailAddress&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;emailAddress&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;replace&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/^\s*|\s*$/g&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;password&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;password&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;replace&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/^\s*|\s*$/g&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;//validate&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;isValidEmail&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;checkEmailIsValid&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;emailAddress&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;isValidPassword&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;checkPasswordIsValid&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;password&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;isValidEmail&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;isValidPassword&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;isValidEmail&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #a6e22e&#34;&gt;sAlert&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Invalid email address&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;isValidPassword&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #a6e22e&#34;&gt;sAlert&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Your password must be at least 8 characters long&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #a6e22e&#34;&gt;Accounts&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;createUser&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;({&lt;/span&gt;
        &lt;span style=&#34;color: #a6e22e&#34;&gt;email&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;emailAddress&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color: #a6e22e&#34;&gt;password&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;password&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #a6e22e&#34;&gt;sAlert&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Account creation failed for unknown reasons :(&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #a6e22e&#34;&gt;Router&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;go&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;loggedInHome&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We grab the form element and wrap it in jQuery and use it to find the inputs we&amp;rsquo;re interested in.&lt;/li&gt;
&lt;li&gt;We get the values for the email and password inputs and trim these values of white space (just in case a user enters in their email address followed by a few spaces or something).&lt;/li&gt;
&lt;li&gt;We check to see if the email and password values are valid using the functions we made in the 3rd step and show an alert to the user if they&amp;rsquo;re invalid.&lt;/li&gt;
&lt;li&gt;If they&amp;rsquo;re valid, we create a new account with the &lt;code&gt;Accounts.createUser&lt;/code&gt; function. If that returns an error, we surface an error for the user. If it&amp;rsquo;s successful, we redirect them to a new page&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;some-notes:eb1c42d623b1b1c8a006d6a9493a0eae&#34;&gt;Some notes&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;re using the &lt;code&gt;sAlert&lt;/code&gt; function from the alert package we installed earlier to show alerts.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re also redirecting the user to a new route after they sign up, using &lt;a href=&#34;https://github.com/iron-meteor/iron-router&#34;&gt;Iron Router&lt;/a&gt;. This is a route and template you have to set up separately. I recommend using the &lt;code&gt;iron-meteor&lt;/code&gt; scaffolding tool (&lt;a href=&#34;https://github.com/iron-meteor/iron-cli&#34;&gt;https://github.com/iron-meteor/iron-cli&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&#34;6-set-up-the-event-handlers-for-the-login-form:eb1c42d623b1b1c8a006d6a9493a0eae&#34;&gt;6. Set up the event handlers for the Login form&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Template&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Login&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;events&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;({&lt;/span&gt;
  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;submit .login-form&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;event&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;event&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;preventDefault&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;$form&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;event&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;currentTarget&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;$emailInput&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;$form&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;find&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;.email-address-input&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;eq&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;$passwordInput&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;$form&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;find&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;.password-input&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;eq&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;emailAddress&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;$emailInput&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;val&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;password&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;$passwordInput&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;val&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;//trim&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;emailAddress&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;emailAddress&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;replace&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/^\s*|\s*$/g&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;password&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;password&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;replace&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/^\s*|\s*$/g&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;//validate&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;isValidEmail&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;checkEmailIsValid&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;emailAddress&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;isValidPassword&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;checkPasswordIsValid&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;password&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;isValidEmail&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;isValidPassword&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;isValidEmail&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #a6e22e&#34;&gt;sAlert&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Invalid email address&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;isValidPassword&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #a6e22e&#34;&gt;sAlert&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Your password must be at least 8 characters long&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #a6e22e&#34;&gt;Meteor&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;loginWithPassword&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;emailAddress&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;password&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #a6e22e&#34;&gt;sAlert&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Account login failed for unknown reasons :(&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #a6e22e&#34;&gt;Router&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;go&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;loggedInHome&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This event handler is almost identical to the last one, except for the selector used to get the submit event on the form (it&amp;rsquo;s now &lt;code&gt;submit .login-form&lt;/code&gt; instead of &lt;code&gt;submit .sign-up-form&lt;/code&gt;). Also, the SignUp template uses the &lt;code&gt;Accounts.createUser&lt;/code&gt; function, while the Login template uses the &lt;code&gt;Meteor.loginWithPassword&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;These functions have slightly different APIs (&lt;code&gt;Accounts.createUser&lt;/code&gt; takes an object for its first argument and &lt;code&gt;Meteor.loginWithPassword&lt;/code&gt; just takes three flat arguments), so be careful with that.&lt;/p&gt;

&lt;h2 id=&#34;finishing-up:eb1c42d623b1b1c8a006d6a9493a0eae&#34;&gt;Finishing up&lt;/h2&gt;

&lt;p&gt;This is a really basic example. For a full-featured application, you&amp;rsquo;ll also want to allow the user to reset their password.&lt;/p&gt;

&lt;p&gt;Look into &lt;a href=&#34;http://docs.meteor.com/#/full/accounts_forgotpassword&#34;&gt;Accounts.forgotPassword&lt;/a&gt; and &lt;a href=&#34;http://docs.meteor.com/#/full/accounts_resetpassword&#34;&gt;Accounts.resetPassword&lt;/a&gt; for more information about how to do this.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s also a good write-up on this over on Ben McMahen&amp;rsquo;s blog: &lt;a href=&#34;http://blog.benmcmahen.com/post/41741539120/building-a-customized-accounts-ui-for-meteor&#34;&gt;http://blog.benmcmahen.com/post/41741539120/building-a-customized-accounts-ui-for-meteor&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Scoped ReactiveVars to Control Tab Visibility (Meteor.js)</title>
      <link>http://smashingthingstogether.com/post/scoped-reactive-var-meteor-js/</link>
      <pubDate>Mon, 25 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://smashingthingstogether.com/post/scoped-reactive-var-meteor-js/</guid>
      <description>

&lt;h2 id=&#34;step-1:be17c3b1dd9703692e6e1425a1f00964&#34;&gt;Step 1&lt;/h2&gt;

&lt;p&gt;Install the ReactiveVar package.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;meteor&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;reactive-var&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;step-2:be17c3b1dd9703692e6e1425a1f00964&#34;&gt;Step 2&lt;/h2&gt;

&lt;p&gt;When the template is created, initialize a new ReactiveVar and set its default value.&lt;/p&gt;

&lt;p&gt;This ReactiveVar, this.currentPage, will be available on the page&amp;rsquo;s Template instance.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Template&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;DiscoverPage&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;created&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;currentTab&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ReactiveVar&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;recent projects&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;step-3:be17c3b1dd9703692e6e1425a1f00964&#34;&gt;Step 3&lt;/h2&gt;

&lt;p&gt;Also, on template creation, add a function to the template instance to check if the current tab is equal to the passed in value.&lt;/p&gt;

&lt;p&gt;We will re-use this function a couple times, so we&amp;rsquo;re putting it on the template instance instead of defining it in a helper multiple times.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Template&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;DiscoverPage&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;created&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;currentTab&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ReactiveVar&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;recent projects&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;currentTabIs&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;tabName&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;tabName&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Template&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;instance&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;currentTab&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;  
&lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;step-4:be17c3b1dd9703692e6e1425a1f00964&#34;&gt;Step 4&lt;/h2&gt;

&lt;p&gt;The html should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;DiscoverPage&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;nav&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;tab-link {{selectedIfCurrentTabIs &amp;#39;recent projects&amp;#39;}}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;data-tab-name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;recent projects&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;recent projects&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;tab-link {{selectedIfCurrentTabIs &amp;#39;recent sketches&amp;#39;}}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;data-tab-name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;recent sketches&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;recent sketches&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
  {{#if currentTabIs &amp;#39;recent projects&amp;#39;}}
    {{&amp;gt; RecentProjects }}
  {{/if}}
  {{#if currentTabIs &amp;#39;recent sketches&amp;#39;}}
    {{&amp;gt; RecentSketches }}
  {{/if}}
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;step-5:be17c3b1dd9703692e6e1425a1f00964&#34;&gt;Step 5&lt;/h2&gt;

&lt;p&gt;In order to make the html work, we need to add some helpers.&lt;/p&gt;

&lt;p&gt;These will check the ReactiveVar we set up in the second step and re-run whenever it changes. (see Docs for ReactiveVar)&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Template&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;DiscoverPage&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;helpers&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;({&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;currentTabIs&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;tabName&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Template&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;instance&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;currentTabIs&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;tabName&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;selectedIfCurrentTabIs&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;tabName&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Template&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;instance&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;currentTabIs&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;tabName&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;selected&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll notice we&amp;rsquo;re using the currentTabIs function twice here.&lt;/p&gt;

&lt;h2 id=&#34;step-6:be17c3b1dd9703692e6e1425a1f00964&#34;&gt;Step 6&lt;/h2&gt;

&lt;p&gt;Finally, we add a click event in order to change the ReactiveVar to the right tab.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Template&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;DiscoverPage&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;events&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;({&lt;/span&gt;
  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;click .tab-link&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;preventDefault&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;$tabLink&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;currentTarget&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;tabName&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;$tabLink&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;tab-name&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #a6e22e&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;currentTab&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;tabName&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;recent projects&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Done!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Benefits of using a scoped ReactiveVar&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The benefits of using a scoped ReactiveVar are many, but the best one is that it makes it a lot easier to re-use the same functionality multiple times on the same page without copying the code. We could very easily make these helper functions and events function global and then use them in multiple templates or the same template multiple times.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>